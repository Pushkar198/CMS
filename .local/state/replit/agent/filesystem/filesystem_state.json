{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is an AI-powered website builder that allows users to create, edit, and manage web pages through an intuitive interface. The system combines AI generation capabilities with traditional web development tools, featuring a visual page editor, media library, flow-based site architecture visualization, and export functionality. Built as a full-stack TypeScript application with React frontend and Express backend.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# Recent Changes (August 13, 2025)\n\n## Migration from Replit Agent to Replit Environment\n- ✓ Successfully installed all required dependencies including tsx and TypeScript\n- ✓ Fixed server startup and port configuration \n- ✓ Resolved DOM nesting warning in sidebar navigation\n- ✓ Added page preview functionality - users can now view published pages at `/preview/{page-id}`\n- ✓ Enhanced dashboard and export pages with working preview buttons\n- ✓ Modified \"Publish Site\" button to \"View Site\" button for better user experience\n- ✓ Completed migration from Replit Agent to standard Replit environment (August 13, 2025)\n- ✓ Resolved tsx dependency issue and confirmed application startup\n- ✓ Verified full functionality of AI website builder interface\n- ✓ Updated AI service to use PWC GenAI API instead of Google Gemini\n- ✓ Removed @google/genai dependency and implemented PWC API integration\n- ✓ Configured PWC_API_KEY for authentication\n\n## Approval Workflow System Implementation\n- ✓ Updated database schema with approval workflow states: Draft → Pending_Approval → Approved → Live\n- ✓ Added approval tracking fields: submittedAt, approvedAt, rejectedAt, approvedBy, rejectionReason\n- ✓ Enhanced user model with role-based system (creator, approver, admin)\n- ✓ Implemented comprehensive approval workflow API endpoints\n- ✓ Created dedicated Approval Dashboard for reviewers to manage pending pages\n- ✓ Enhanced main dashboard with \"Submit for Approval\" functionality\n- ✓ Added approval workflow navigation and proper state management\n- ✓ Fixed page linking system: improved auto-extract and precise element targeting\n\n## Page Linking System Improvements\n- ✓ Enhanced auto-extract to find all clickable elements comprehensively\n- ✓ Fixed page navigation to target specific elements instead of entire page\n- ✓ Improved element selection with user-friendly interface\n\n## Component System Implementation\n- ✓ Added component extraction and reuse functionality to Page Flow Editor\n- ✓ Created database schema for components and page-component relationships\n- ✓ Implemented API endpoints for component CRUD operations\n- ✓ Enhanced Flow Editor with component management UI\n- ✓ Users can now extract components from one page and add them to other pages\n- ✓ Component sidebar shows all available reusable components\n\n## Page Navigation Flow System\n- ✓ Enhanced database schema to support page-to-page navigation links\n- ✓ Added triggerText and linkType fields to links table for defining clickable elements\n- ✓ Created comprehensive API endpoints for creating and managing page navigation flows\n- ✓ Implemented hooks for page link management (useLinks, useCreateLink, etc.)\n- ✓ Enhanced Flow Editor with \"Create Page Link\" functionality\n- ✓ Users can now define clickable elements (buttons, links) that navigate between pages\n- ✓ Visual flow editor displays navigation connections with labeled edges\n- ✓ Sidebar shows all page navigation links with source → destination visualization\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript, using Vite as the build tool\n- **Routing**: Wouter for client-side routing with a simple file-based page structure\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Radix UI components with Tailwind CSS for styling, following the shadcn/ui design system\n- **Component Structure**: Modular component architecture with separate directories for UI components, pages, hooks, and utilities\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Language**: TypeScript with ES modules\n- **Storage**: In-memory storage implementation with interface-based design allowing for easy database integration\n- **API Design**: RESTful API endpoints with comprehensive CRUD operations for pages, media, links, and generations\n- **File Handling**: Multer middleware for file uploads with local filesystem storage\n\n## Data Storage Solutions\n- **Database**: Configured for PostgreSQL using Drizzle ORM with Neon Database serverless driver\n- **Schema**: Well-defined database schema with tables for pages, links, media, and AI generations\n- **Migration System**: Drizzle Kit for database migrations and schema management\n- **Current Implementation**: Memory-based storage for development/testing with production-ready database configuration\n\n## Authentication and Authorization\n- **Current State**: No authentication system implemented\n- **Session Management**: Express sessions configured with PostgreSQL session store (connect-pg-simple)\n- **User Model**: Database schema includes user table structure ready for implementation\n\n## External Dependencies\n\n### AI and Content Generation\n- **PWC GenAI API**: Integration with PWC's Gemini-2.0-flash model for AI-powered page generation and content creation\n- **Features**: Automatic HTML/CSS/JavaScript generation, page thumbnails, and content suggestions\n- **API Endpoint**: https://genai-sharedservice-americas.pwc.com/completions\n\n### Database and Storage\n- **Neon Database**: Serverless PostgreSQL database hosting\n- **Drizzle ORM**: Type-safe database interactions and query building\n- **Local File Storage**: Multer-based file upload system for media assets\n\n### UI and Styling\n- **Radix UI**: Comprehensive component library for accessible UI elements\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **React Flow**: Interactive node-based editor for visualizing page relationships\n- **Lucide React**: Icon library for UI elements\n\n### Development Tools\n- **Replit Integration**: Custom plugins for development environment and error handling\n- **Vite Plugins**: Hot module replacement, runtime error overlay, and development tooling\n- **TypeScript**: Full type safety across frontend, backend, and shared schemas\n\n### Form and Data Handling\n- **React Hook Form**: Form management with validation\n- **Zod**: Schema validation for data integrity\n- **Date-fns**: Date manipulation and formatting utilities","size_bytes":6600},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPageSchema, insertLinkSchema, insertMediaSchema, insertGenerationSchema, insertComponentSchema, insertPageComponentSchema, type InsertPage } from \"@shared/schema\";\nimport { generatePageWithAI, generatePageThumbnail } from \"./services/gemini\";\nimport { exportSite } from \"./services/export\";\nimport { generateNavigationScript } from \"./services/page-navigation\";\nimport { extractClickableElements } from \"./services/element-extractor\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: uploadDir,\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      cb(null, uniqueSuffix + path.extname(file.originalname));\n    }\n  }),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/svg+xml', 'application/pdf'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Pages routes\n  app.get('/api/pages', async (req, res) => {\n    try {\n      const pages = await storage.getPages();\n      res.json(pages);\n    } catch (error) {\n      console.error('Error fetching pages:', error);\n      res.status(500).json({ error: 'Failed to fetch pages' });\n    }\n  });\n\n  // Get pages pending approval (must be before /api/pages/:id)\n  app.get('/api/pages/pending-approval', async (req, res) => {\n    try {\n      const pages = await storage.getPendingApprovalPages();\n      res.json(pages);\n    } catch (error) {\n      console.error('Error fetching pending approval pages:', error);\n      res.status(500).json({ error: 'Failed to fetch pending approval pages' });\n    }\n  });\n\n  app.get('/api/pages/:id', async (req, res) => {\n    try {\n      const page = await storage.getPage(req.params.id);\n      if (!page) {\n        return res.status(404).json({ error: 'Page not found' });\n      }\n      res.json(page);\n    } catch (error) {\n      console.error('Error fetching page:', error);\n      res.status(500).json({ error: 'Failed to fetch page' });\n    }\n  });\n\n  app.post('/api/pages', async (req, res) => {\n    try {\n      const validatedData = insertPageSchema.parse(req.body);\n      const page = await storage.createPage(validatedData);\n      res.status(201).json(page);\n    } catch (error) {\n      console.error('Error creating page:', error);\n      res.status(400).json({ error: 'Invalid page data' });\n    }\n  });\n\n  app.put('/api/pages/:id', async (req, res) => {\n    try {\n      const validatedData = insertPageSchema.partial().parse(req.body);\n      const page = await storage.updatePage(req.params.id, validatedData);\n      if (!page) {\n        return res.status(404).json({ error: 'Page not found' });\n      }\n      res.json(page);\n    } catch (error) {\n      console.error('Error updating page:', error);\n      res.status(400).json({ error: 'Invalid page data' });\n    }\n  });\n\n  // Page state management\n  app.patch('/api/pages/:id/state', async (req, res) => {\n    try {\n      const { state } = req.body;\n      if (!['Draft', 'Pending_Approval', 'Approved', 'Live', 'Expired', 'Rejected'].includes(state)) {\n        return res.status(400).json({ error: 'Invalid state. Must be Draft, Pending_Approval, Approved, Live, Expired, or Rejected' });\n      }\n\n      const currentPage = await storage.getPage(req.params.id);\n      if (!currentPage) {\n        return res.status(404).json({ error: 'Page not found' });\n      }\n\n      const updateData: Partial<InsertPage> = { state };\n      \n      // Set publishAt when moving to Live state (only from Approved state)\n      if (state === 'Live' && currentPage.state === 'Approved') {\n        updateData.publishAt = new Date();\n      }\n      \n      // Set expireAt when moving to Expired state\n      if (state === 'Expired' && currentPage.state !== 'Expired') {\n        updateData.expireAt = new Date();\n      }\n\n      const page = await storage.updatePage(req.params.id, updateData);\n      res.json(page);\n    } catch (error) {\n      console.error('Error updating page state:', error);\n      res.status(500).json({ error: 'Failed to update page state' });\n    }\n  });\n\n  // Approval workflow routes\n  app.post('/api/pages/:id/submit-for-approval', async (req, res) => {\n    try {\n      const page = await storage.submitPageForApproval(req.params.id);\n      if (!page) {\n        return res.status(404).json({ error: 'Page not found or cannot be submitted for approval' });\n      }\n      res.json(page);\n    } catch (error) {\n      console.error('Error submitting page for approval:', error);\n      res.status(500).json({ error: 'Failed to submit page for approval' });\n    }\n  });\n\n  app.post('/api/pages/:id/approve', async (req, res) => {\n    try {\n      const { approverId } = req.body;\n      if (!approverId) {\n        return res.status(400).json({ error: 'Approver ID is required' });\n      }\n      \n      const page = await storage.approvePage(req.params.id, approverId);\n      if (!page) {\n        return res.status(404).json({ error: 'Page not found or not pending approval' });\n      }\n      res.json(page);\n    } catch (error) {\n      console.error('Error approving page:', error);\n      res.status(500).json({ error: 'Failed to approve page' });\n    }\n  });\n\n  app.post('/api/pages/:id/reject', async (req, res) => {\n    try {\n      const { approverId, reason } = req.body;\n      if (!approverId || !reason) {\n        return res.status(400).json({ error: 'Approver ID and rejection reason are required' });\n      }\n      \n      const page = await storage.rejectPage(req.params.id, approverId, reason);\n      if (!page) {\n        return res.status(404).json({ error: 'Page not found or not pending approval' });\n      }\n      res.json(page);\n    } catch (error) {\n      console.error('Error rejecting page:', error);\n      res.status(500).json({ error: 'Failed to reject page' });\n    }\n  });\n\n\n\n  app.delete('/api/pages/:id', async (req, res) => {\n    try {\n      const success = await storage.deletePage(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: 'Page not found' });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting page:', error);\n      res.status(500).json({ error: 'Failed to delete page' });\n    }\n  });\n\n  // Links routes\n  app.get('/api/links', async (req, res) => {\n    try {\n      const links = await storage.getLinks();\n      res.json(links);\n    } catch (error) {\n      console.error('Error fetching links:', error);\n      res.status(500).json({ error: 'Failed to fetch links' });\n    }\n  });\n\n  app.get('/api/links/page/:pageId', async (req, res) => {\n    try {\n      const links = await storage.getLinksByPage(req.params.pageId);\n      res.json(links);\n    } catch (error) {\n      console.error('Error fetching page links:', error);\n      res.status(500).json({ error: 'Failed to fetch page links' });\n    }\n  });\n\n  app.post('/api/links', async (req, res) => {\n    try {\n      const validatedData = insertLinkSchema.parse(req.body);\n      const link = await storage.createLink(validatedData);\n      res.status(201).json(link);\n    } catch (error) {\n      console.error('Error creating link:', error);\n      res.status(400).json({ error: 'Invalid link data' });\n    }\n  });\n\n  app.delete('/api/links/:id', async (req, res) => {\n    try {\n      const success = await storage.deleteLink(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: 'Link not found' });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting link:', error);\n      res.status(500).json({ error: 'Failed to delete link' });\n    }\n  });\n\n  // Media routes\n  app.get('/api/media', async (req, res) => {\n    try {\n      const { search } = req.query;\n      const media = search && typeof search === 'string' \n        ? await storage.searchMedia(search)\n        : await storage.getMedia();\n      res.json(media);\n    } catch (error) {\n      console.error('Error fetching media:', error);\n      res.status(500).json({ error: 'Failed to fetch media' });\n    }\n  });\n\n  app.post('/api/media/upload', upload.array('files', 10), async (req, res) => {\n    try {\n      if (!req.files || !Array.isArray(req.files)) {\n        return res.status(400).json({ error: 'No files uploaded' });\n      }\n\n      const uploadedMedia = [];\n      for (const file of req.files) {\n        const mediaData = {\n          filename: file.filename,\n          originalName: file.originalname,\n          mimeType: file.mimetype,\n          size: file.size,\n          path: file.path,\n          tags: [],\n        };\n        const media = await storage.createMedia(mediaData);\n        uploadedMedia.push(media);\n      }\n\n      res.status(201).json(uploadedMedia);\n    } catch (error) {\n      console.error('Error uploading media:', error);\n      res.status(500).json({ error: 'Failed to upload media' });\n    }\n  });\n\n  app.delete('/api/media/:id', async (req, res) => {\n    try {\n      const media = await storage.getMediaItem(req.params.id);\n      if (!media) {\n        return res.status(404).json({ error: 'Media not found' });\n      }\n\n      // Delete file from filesystem\n      try {\n        fs.unlinkSync(media.path);\n      } catch (error) {\n        console.warn('Failed to delete file from filesystem:', error);\n      }\n\n      const success = await storage.deleteMedia(req.params.id);\n      res.json({ success });\n    } catch (error) {\n      console.error('Error deleting media:', error);\n      res.status(500).json({ error: 'Failed to delete media' });\n    }\n  });\n\n  // Serve uploaded media files\n  app.get('/api/media/file/:filename', (req, res) => {\n    const filePath = path.join(uploadDir, req.params.filename);\n    if (fs.existsSync(filePath)) {\n      res.sendFile(filePath);\n    } else {\n      res.status(404).json({ error: 'File not found' });\n    }\n  });\n\n  // AI generation routes\n  app.post('/api/generate', async (req, res) => {\n    try {\n      const { prompt, pageType, pageName, options } = req.body;\n      \n      if (!prompt || !pageType || !pageName) {\n        return res.status(400).json({ error: 'Missing required fields: prompt, pageType, pageName' });\n      }\n\n      // Create generation record\n      const generationData = {\n        prompt,\n        pageType,\n        status: 'processing' as const,\n      };\n      \n      const generation = await storage.createGeneration(generationData);\n      \n      // Start AI generation (this would be better as a background job in production)\n      const startTime = Date.now();\n      \n      try {\n        const generatedContent = await generatePageWithAI(prompt, pageType, options);\n        const thumbnail = await generatePageThumbnail(generatedContent.html, generatedContent.css);\n        \n        // Create the page\n        const pageData = {\n          name: pageName,\n          state: 'Draft' as const,\n          html: generatedContent.html,\n          css: generatedContent.css,\n          js: generatedContent.js,\n          thumbnail,\n          pageType,\n        };\n        \n        const page = await storage.createPage(pageData);\n        \n        // Update generation record\n        const duration = Date.now() - startTime;\n        await storage.updateGeneration(generation.id, {\n          pageId: page.id,\n          status: 'completed',\n          duration,\n        });\n        \n        res.status(201).json({ page, generation: { ...generation, status: 'completed', duration, pageId: page.id } });\n      } catch (error) {\n        // Update generation record with failure\n        await storage.updateGeneration(generation.id, {\n          status: 'failed',\n          duration: Date.now() - startTime,\n        });\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error generating page:', error);\n      res.status(500).json({ \n        error: 'Failed to generate page', \n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  app.get('/api/generations', async (req, res) => {\n    try {\n      const generations = await storage.getGenerations();\n      res.json(generations);\n    } catch (error) {\n      console.error('Error fetching generations:', error);\n      res.status(500).json({ error: 'Failed to fetch generations' });\n    }\n  });\n\n  // Page preview route - serves individual pages\n  app.get('/preview/:id', async (req, res) => {\n    try {\n      const page = await storage.getPage(req.params.id);\n      if (!page) {\n        return res.status(404).send('<h1>Page not found</h1>');\n      }\n\n      // Allow viewing Live and Draft pages in preview\n      if (page.state === 'Expired') {\n        return res.status(404).send('<h1>Page expired</h1><p>This page is no longer available.</p>');\n      }\n\n      // Get page navigation links for this page\n      const pageLinks = await storage.getLinksByPage(req.params.id);\n      \n      // Generate JavaScript to handle page navigation\n      const navigationScript = generateNavigationScript(pageLinks);\n\n      const fullHtml = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>${page.name}</title>\n  <style>${page.css || ''}</style>\n</head>\n<body>\n  ${page.html}\n  <script>\n    ${page.js || ''}\n    ${navigationScript}\n  </script>\n</body>\n</html>`;\n      \n      res.setHeader('Content-Type', 'text/html');\n      res.send(fullHtml);\n    } catch (error) {\n      console.error('Error serving page preview:', error);\n      res.status(500).send('<h1>Error loading page</h1>');\n    }\n  });\n\n  // Extract clickable elements from a page\n  app.get('/api/pages/:id/clickable-elements', async (req, res) => {\n    try {\n      const page = await storage.getPage(req.params.id);\n      if (!page) {\n        return res.status(404).json({ error: 'Page not found' });\n      }\n\n      const clickableElements = extractClickableElements(page.html);\n      res.json(clickableElements);\n    } catch (error) {\n      console.error('Error extracting clickable elements:', error);\n      res.status(500).json({ error: 'Failed to extract clickable elements' });\n    }\n  });\n\n  // Component routes\n  app.get('/api/components', async (req, res) => {\n    try {\n      const components = await storage.getComponents();\n      res.json(components);\n    } catch (error) {\n      console.error('Error fetching components:', error);\n      res.status(500).json({ error: 'Failed to fetch components' });\n    }\n  });\n\n  app.get('/api/components/page/:pageId', async (req, res) => {\n    try {\n      const components = await storage.getComponentsByPage(req.params.pageId);\n      res.json(components);\n    } catch (error) {\n      console.error('Error fetching page components:', error);\n      res.status(500).json({ error: 'Failed to fetch page components' });\n    }\n  });\n\n  app.post('/api/components', async (req, res) => {\n    try {\n      const validatedData = insertComponentSchema.parse(req.body);\n      const component = await storage.createComponent(validatedData);\n      res.status(201).json(component);\n    } catch (error) {\n      console.error('Error creating component:', error);\n      res.status(400).json({ error: 'Invalid component data' });\n    }\n  });\n\n  app.delete('/api/components/:id', async (req, res) => {\n    try {\n      const success = await storage.deleteComponent(req.params.id);\n      res.json({ success });\n    } catch (error) {\n      console.error('Error deleting component:', error);\n      res.status(500).json({ error: 'Failed to delete component' });\n    }\n  });\n\n  // Page component routes\n  app.get('/api/pages/:pageId/components', async (req, res) => {\n    try {\n      const pageComponents = await storage.getPageComponents(req.params.pageId);\n      res.json(pageComponents);\n    } catch (error) {\n      console.error('Error fetching page components:', error);\n      res.status(500).json({ error: 'Failed to fetch page components' });\n    }\n  });\n\n  app.post('/api/pages/:pageId/components', async (req, res) => {\n    try {\n      const validatedData = insertPageComponentSchema.parse({\n        ...req.body,\n        pageId: req.params.pageId,\n      });\n      const pageComponent = await storage.addComponentToPage(validatedData);\n      res.status(201).json(pageComponent);\n    } catch (error) {\n      console.error('Error adding component to page:', error);\n      res.status(400).json({ error: 'Invalid page component data' });\n    }\n  });\n\n  app.delete('/api/pages/components/:id', async (req, res) => {\n    try {\n      const success = await storage.removeComponentFromPage(req.params.id);\n      res.json({ success });\n    } catch (error) {\n      console.error('Error removing component from page:', error);\n      res.status(500).json({ error: 'Failed to remove component from page' });\n    }\n  });\n\n  // Export routes\n  // Initialize dummy pages for testing\n  app.post('/api/init-dummy-pages', async (req, res) => {\n    try {\n      const fs = await import('fs/promises');\n      \n      // Read dummy page data\n      const homePageData = JSON.parse(await fs.readFile('dummy-home-page.json', 'utf-8'));\n      const aboutPageData = JSON.parse(await fs.readFile('dummy-about-page.json', 'utf-8'));\n      \n      // Create the pages\n      const homePage = await storage.createPage(homePageData);\n      const aboutPage = await storage.createPage(aboutPageData);\n      \n      res.json({ \n        message: 'Dummy pages created successfully',\n        pages: [homePage, aboutPage]\n      });\n    } catch (error) {\n      console.error('Error creating dummy pages:', error);\n      res.status(500).json({ error: 'Failed to create dummy pages' });\n    }\n  });\n\n  app.post('/api/export', async (req, res) => {\n    try {\n      const options = req.body;\n      const result = await exportSite(options);\n      res.json(result);\n    } catch (error) {\n      console.error('Error exporting site:', error);\n      res.status(500).json({ error: 'Failed to export site' });\n    }\n  });\n\n  // Stats endpoint for dashboard\n  app.get('/api/stats', async (req, res) => {\n    try {\n      const allPages = await storage.getPages();\n      const media = await storage.getMedia();\n      \n      const stats = {\n        totalPages: allPages.length,\n        livePages: allPages.filter(p => p.state === 'Live').length,\n        draftPages: allPages.filter(p => p.state === 'Draft').length,\n        expiredPages: allPages.filter(p => p.state === 'Expired').length,\n        mediaFiles: media.length,\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      res.status(500).json({ error: 'Failed to fetch stats' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":19187},"server/storage.ts":{"content":"import { type Page, type InsertPage, type Link, type InsertLink, type Media, type InsertMedia, type Generation, type InsertGeneration, type User, type InsertUser, type Component, type InsertComponent, type PageComponent, type InsertPageComponent } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Page methods\n  getPages(): Promise<Page[]>;\n  getPage(id: string): Promise<Page | undefined>;\n  createPage(page: InsertPage): Promise<Page>;\n  updatePage(id: string, updates: Partial<InsertPage>): Promise<Page | undefined>;\n  deletePage(id: string): Promise<boolean>;\n  getPagesByState(state: string): Promise<Page[]>;\n  \n  // Approval workflow methods\n  submitPageForApproval(pageId: string): Promise<Page | undefined>;\n  approvePage(pageId: string, approverId: string): Promise<Page | undefined>;\n  rejectPage(pageId: string, approverId: string, reason: string): Promise<Page | undefined>;\n  getPendingApprovalPages(): Promise<Page[]>;\n\n  // Link methods\n  getLinks(): Promise<Link[]>;\n  getLinksByPage(pageId: string): Promise<Link[]>;\n  createLink(link: InsertLink): Promise<Link>;\n  deleteLink(id: string): Promise<boolean>;\n\n  // Media methods\n  getMedia(): Promise<Media[]>;\n  getMediaItem(id: string): Promise<Media | undefined>;\n  createMedia(media: InsertMedia): Promise<Media>;\n  deleteMedia(id: string): Promise<boolean>;\n  searchMedia(query: string): Promise<Media[]>;\n\n  // Generation methods\n  getGenerations(): Promise<Generation[]>;\n  getGeneration(id: string): Promise<Generation | undefined>;\n  createGeneration(generation: InsertGeneration): Promise<Generation>;\n  updateGeneration(id: string, updates: Partial<InsertGeneration>): Promise<Generation | undefined>;\n\n  // Component methods\n  getComponents(): Promise<Component[]>;\n  getComponent(id: string): Promise<Component | undefined>;\n  getComponentsByPage(pageId: string): Promise<Component[]>;\n  createComponent(component: InsertComponent): Promise<Component>;\n  deleteComponent(id: string): Promise<boolean>;\n\n  // Page component methods\n  getPageComponents(pageId: string): Promise<PageComponent[]>;\n  addComponentToPage(pageComponent: InsertPageComponent): Promise<PageComponent>;\n  removeComponentFromPage(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private pages: Map<string, Page> = new Map();\n  private links: Map<string, Link> = new Map();\n  private mediaItems: Map<string, Media> = new Map();\n  private generations: Map<string, Generation> = new Map();\n  private components: Map<string, Component> = new Map();\n  private pageComponents: Map<string, PageComponent> = new Map();\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      role: insertUser.role || 'creator',\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Page methods\n  async getPages(): Promise<Page[]> {\n    return Array.from(this.pages.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getPage(id: string): Promise<Page | undefined> {\n    return this.pages.get(id);\n  }\n\n  async createPage(insertPage: InsertPage): Promise<Page> {\n    const id = randomUUID();\n    const now = new Date();\n    const page: Page = {\n      ...insertPage,\n      id,\n      createdAt: now,\n      state: insertPage.state || 'Draft',\n      publishAt: insertPage.publishAt || null,\n      expireAt: insertPage.expireAt || null,\n      submittedAt: insertPage.submittedAt || null,\n      approvedAt: insertPage.approvedAt || null,\n      rejectedAt: insertPage.rejectedAt || null,\n      approvedBy: insertPage.approvedBy || null,\n      rejectionReason: insertPage.rejectionReason || null,\n      thumbnail: insertPage.thumbnail || null,\n      pageType: insertPage.pageType || 'custom',\n    };\n    this.pages.set(id, page);\n    return page;\n  }\n\n  async updatePage(id: string, updates: Partial<InsertPage>): Promise<Page | undefined> {\n    const existing = this.pages.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Page = { ...existing, ...updates };\n    this.pages.set(id, updated);\n    return updated;\n  }\n\n  async deletePage(id: string): Promise<boolean> {\n    // Also delete associated links\n    const linksToDelete = Array.from(this.links.values()).filter(\n      link => link.fromPageId === id || link.toPageId === id\n    );\n    linksToDelete.forEach(link => this.links.delete(link.id));\n    \n    return this.pages.delete(id);\n  }\n\n  async getPagesByState(state: string): Promise<Page[]> {\n    return Array.from(this.pages.values()).filter(page => page.state === state);\n  }\n\n  // Approval workflow methods\n  async submitPageForApproval(pageId: string): Promise<Page | undefined> {\n    const page = this.pages.get(pageId);\n    if (!page) return undefined;\n    \n    const updated: Page = {\n      ...page,\n      state: 'Pending_Approval',\n      submittedAt: new Date()\n    };\n    this.pages.set(pageId, updated);\n    return updated;\n  }\n\n  async approvePage(pageId: string, approverId: string): Promise<Page | undefined> {\n    const page = this.pages.get(pageId);\n    if (!page || page.state !== 'Pending_Approval') return undefined;\n    \n    const updated: Page = {\n      ...page,\n      state: 'Approved',\n      approvedAt: new Date(),\n      approvedBy: approverId,\n      rejectionReason: null\n    };\n    this.pages.set(pageId, updated);\n    return updated;\n  }\n\n  async rejectPage(pageId: string, approverId: string, reason: string): Promise<Page | undefined> {\n    const page = this.pages.get(pageId);\n    if (!page || page.state !== 'Pending_Approval') return undefined;\n    \n    const updated: Page = {\n      ...page,\n      state: 'Rejected',\n      rejectedAt: new Date(),\n      approvedBy: approverId,\n      rejectionReason: reason\n    };\n    this.pages.set(pageId, updated);\n    return updated;\n  }\n\n  async getPendingApprovalPages(): Promise<Page[]> {\n    return Array.from(this.pages.values())\n      .filter(page => page.state === 'Pending_Approval')\n      .sort((a, b) => new Date(a.submittedAt || 0).getTime() - new Date(b.submittedAt || 0).getTime());\n  }\n\n  // Link methods\n  async getLinks(): Promise<Link[]> {\n    return Array.from(this.links.values());\n  }\n\n  async getLinksByPage(pageId: string): Promise<Link[]> {\n    return Array.from(this.links.values()).filter(\n      link => link.fromPageId === pageId\n    );\n  }\n\n  async createLink(insertLink: InsertLink): Promise<Link> {\n    const id = randomUUID();\n    const now = new Date();\n    const link: Link = {\n      ...insertLink,\n      id,\n      createdAt: now,\n      linkType: insertLink.linkType || \"button\",\n      fromElementId: insertLink.fromElementId || null,\n      triggerText: insertLink.triggerText || null,\n    };\n    this.links.set(id, link);\n    return link;\n  }\n\n  async deleteLink(id: string): Promise<boolean> {\n    return this.links.delete(id);\n  }\n\n  // Media methods\n  async getMedia(): Promise<Media[]> {\n    return Array.from(this.mediaItems.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getMediaItem(id: string): Promise<Media | undefined> {\n    return this.mediaItems.get(id);\n  }\n\n  async createMedia(insertMedia: InsertMedia): Promise<Media> {\n    const id = randomUUID();\n    const now = new Date();\n    const media: Media = {\n      ...insertMedia,\n      id,\n      createdAt: now,\n      tags: (insertMedia.tags as string[]) || [],\n    };\n    this.mediaItems.set(id, media);\n    return media;\n  }\n\n  async deleteMedia(id: string): Promise<boolean> {\n    return this.mediaItems.delete(id);\n  }\n\n  async searchMedia(query: string): Promise<Media[]> {\n    const lowercaseQuery = query.toLowerCase();\n    return Array.from(this.mediaItems.values()).filter(media =>\n      media.filename.toLowerCase().includes(lowercaseQuery) ||\n      media.originalName.toLowerCase().includes(lowercaseQuery) ||\n      (media.tags && media.tags.some(tag => tag.toLowerCase().includes(lowercaseQuery)))\n    );\n  }\n\n  // Generation methods\n  async getGenerations(): Promise<Generation[]> {\n    return Array.from(this.generations.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getGeneration(id: string): Promise<Generation | undefined> {\n    return this.generations.get(id);\n  }\n\n  async createGeneration(insertGeneration: InsertGeneration): Promise<Generation> {\n    const id = randomUUID();\n    const now = new Date();\n    const generation: Generation = {\n      ...insertGeneration,\n      id,\n      createdAt: now,\n      status: insertGeneration.status || 'processing',\n      duration: insertGeneration.duration || null,\n      pageId: insertGeneration.pageId || null,\n    };\n    this.generations.set(id, generation);\n    return generation;\n  }\n\n  async updateGeneration(id: string, updates: Partial<InsertGeneration>): Promise<Generation | undefined> {\n    const existing = this.generations.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Generation = { ...existing, ...updates };\n    this.generations.set(id, updated);\n    return updated;\n  }\n\n  // Component methods\n  async getComponents(): Promise<Component[]> {\n    return Array.from(this.components.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getComponent(id: string): Promise<Component | undefined> {\n    return this.components.get(id);\n  }\n\n  async getComponentsByPage(pageId: string): Promise<Component[]> {\n    return Array.from(this.components.values()).filter(\n      component => component.sourcePageId === pageId\n    );\n  }\n\n  async createComponent(insertComponent: InsertComponent): Promise<Component> {\n    const id = randomUUID();\n    const now = new Date();\n    const component: Component = {\n      ...insertComponent,\n      id,\n      createdAt: now,\n      description: insertComponent.description || null,\n    };\n    this.components.set(id, component);\n    return component;\n  }\n\n  async deleteComponent(id: string): Promise<boolean> {\n    // Also delete associated page components\n    const pageComponentsToDelete = Array.from(this.pageComponents.values()).filter(\n      pc => pc.componentId === id\n    );\n    pageComponentsToDelete.forEach(pc => this.pageComponents.delete(pc.id));\n    \n    return this.components.delete(id);\n  }\n\n  // Page component methods\n  async getPageComponents(pageId: string): Promise<PageComponent[]> {\n    return Array.from(this.pageComponents.values()).filter(\n      pc => pc.pageId === pageId\n    ).sort((a, b) => (a.position || 0) - (b.position || 0));\n  }\n\n  async addComponentToPage(insertPageComponent: InsertPageComponent): Promise<PageComponent> {\n    const id = randomUUID();\n    const now = new Date();\n    const pageComponent: PageComponent = {\n      ...insertPageComponent,\n      id,\n      createdAt: now,\n      position: insertPageComponent.position || 0,\n      targetSelector: insertPageComponent.targetSelector || null,\n    };\n    this.pageComponents.set(id, pageComponent);\n    return pageComponent;\n  }\n\n  async removeComponentFromPage(id: string): Promise<boolean> {\n    return this.pageComponents.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11832},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const pages = pgTable(\"pages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  state: text(\"state\").notNull().default(\"Draft\"), // Draft, Pending_Approval, Approved, Live, Expired, Rejected\n  html: text(\"html\").notNull(),\n  css: text(\"css\").notNull(),\n  js: text(\"js\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  publishAt: timestamp(\"publish_at\"),\n  expireAt: timestamp(\"expire_at\"),\n  submittedAt: timestamp(\"submitted_at\"),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectedAt: timestamp(\"rejected_at\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  rejectionReason: text(\"rejection_reason\"),\n  thumbnail: text(\"thumbnail\"), // base64 encoded thumbnail or path\n  pageType: text(\"page_type\").notNull().default(\"custom\"), // landing, dashboard, form, blog, etc.\n});\n\nexport const links = pgTable(\"links\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromPageId: varchar(\"from_page_id\").notNull().references(() => pages.id),\n  fromElementId: text(\"from_element_id\"), // CSS selector or element ID\n  triggerText: text(\"trigger_text\"), // Text content to identify clickable element (e.g., \"Settings\")\n  toPageId: varchar(\"to_page_id\").notNull().references(() => pages.id),\n  linkType: text(\"link_type\").notNull().default(\"button\"), // button, link, image, custom\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const media = pgTable(\"media\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  size: integer(\"size\").notNull(),\n  path: text(\"path\").notNull(),\n  tags: jsonb(\"tags\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const generations = pgTable(\"generations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pageId: varchar(\"page_id\").references(() => pages.id),\n  prompt: text(\"prompt\").notNull(),\n  pageType: text(\"page_type\").notNull(),\n  status: text(\"status\").notNull().default(\"processing\"), // processing, completed, failed\n  duration: integer(\"duration\"), // in milliseconds\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const components = pgTable(\"components\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  sourcePageId: varchar(\"source_page_id\").notNull().references(() => pages.id),\n  selector: text(\"selector\").notNull(), // CSS selector to extract component\n  html: text(\"html\").notNull(), // extracted HTML\n  css: text(\"css\").notNull(), // extracted/scoped CSS\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const pageComponents = pgTable(\"page_components\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pageId: varchar(\"page_id\").notNull().references(() => pages.id),\n  componentId: varchar(\"component_id\").notNull().references(() => components.id),\n  position: integer(\"position\").default(0), // order within page\n  targetSelector: text(\"target_selector\"), // where to insert the component\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertPageSchema = createInsertSchema(pages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLinkSchema = createInsertSchema(links).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMediaSchema = createInsertSchema(media).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGenerationSchema = createInsertSchema(generations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertComponentSchema = createInsertSchema(components).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPageComponentSchema = createInsertSchema(pageComponents).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Page = typeof pages.$inferSelect;\nexport type InsertPage = z.infer<typeof insertPageSchema>;\nexport type Link = typeof links.$inferSelect;\nexport type InsertLink = z.infer<typeof insertLinkSchema>;\nexport type Media = typeof media.$inferSelect;\nexport type InsertMedia = z.infer<typeof insertMediaSchema>;\nexport type Generation = typeof generations.$inferSelect;\nexport type InsertGeneration = z.infer<typeof insertGenerationSchema>;\nexport type Component = typeof components.$inferSelect;\nexport type InsertComponent = z.infer<typeof insertComponentSchema>;\nexport type PageComponent = typeof pageComponents.$inferSelect;\nexport type InsertPageComponent = z.infer<typeof insertPageComponentSchema>;\n\n// Users table (keeping existing)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"creator\"), // creator, approver, admin\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":5507},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport Dashboard from \"@/pages/dashboard\";\nimport FlowEditor from \"@/pages/flow-editor\";\nimport PageEditor from \"@/pages/page-editor\";\nimport MediaLibrary from \"@/pages/media-library\";\nimport AIGenerator from \"@/pages/ai-generator\";\nimport Export from \"@/pages/export\";\nimport ApprovalDashboard from \"@/pages/approval-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <MainLayout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/flow-editor\" component={FlowEditor} />\n        <Route path=\"/page-editor\" component={PageEditor} />\n        <Route path=\"/media-library\" component={MediaLibrary} />\n        <Route path=\"/ai-generator\" component={AIGenerator} />\n        <Route path=\"/approval-dashboard\" component={ApprovalDashboard} />\n        <Route path=\"/export\" component={Export} />\n        <Route component={NotFound} />\n      </Switch>\n    </MainLayout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1479},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(215 25% 27%);\n  --card: hsl(210 40% 98%);\n  --card-foreground: hsl(215 25% 27%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(215 25% 27%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(220 14% 96%);\n  --secondary-foreground: hsl(215 25% 27%);\n  --muted: hsl(210 40% 98%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(165 85% 39%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 40% 95%);\n  --input: hsl(210 40% 98%);\n  --ring: hsl(217 91% 60%);\n  --radius: 0.5rem;\n\n  /* Custom app colors from design */\n  --slate-50: hsl(210 40% 98%);\n  --slate-100: hsl(210 40% 96%);\n  --slate-200: hsl(214 32% 91%);\n  --slate-300: hsl(213 27% 84%);\n  --slate-500: hsl(215 16% 47%);\n  --slate-600: hsl(215 19% 35%);\n  --slate-700: hsl(215 25% 27%);\n  --slate-900: hsl(222 84% 5%);\n\n  --font-inter: 'Inter', sans-serif;\n}\n\n.dark {\n  --background: hsl(222 84% 5%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 5%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 5%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(222 84% 5%);\n  --secondary: hsl(217 32% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 16% 57%);\n  --accent: hsl(165 85% 39%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(217 91% 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-inter);\n  }\n}\n\n@layer utilities {\n  .font-inter {\n    font-family: var(--font-inter);\n  }\n}\n\n/* Custom scrollbars */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground) / 0.3);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground) / 0.5);\n}\n\n/* React Flow styles */\n.react-flow__node {\n  font-family: var(--font-inter);\n}\n\n.react-flow__edge-path {\n  stroke: hsl(var(--primary));\n  stroke-width: 2;\n}\n\n.react-flow__connection-line {\n  stroke: hsl(var(--primary));\n  stroke-width: 2;\n  stroke-dasharray: 5,5;\n}\n\n/* Loading animation */\n@keyframes pulse-slow {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 2s ease-in-out infinite;\n}\n\n/* Drop zone styles */\n.drop-zone-active {\n  @apply border-blue-500 bg-blue-50;\n}\n\n.drop-zone-active::after {\n  content: '';\n  @apply absolute inset-0 bg-blue-100 rounded-xl;\n}\n\n/* Editable content styles */\n[data-editable]:hover {\n  @apply outline-2 outline-dashed outline-blue-500 outline-offset-2;\n}\n\n[data-editable].editing {\n  @apply outline-2 outline outline-blue-500 outline-offset-2;\n}\n","size_bytes":3271},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/export.ts":{"content":"import * as fs from 'fs';\nimport * as path from 'path';\nimport { storage } from '../storage';\n\nexport interface ExportOptions {\n  format: 'static' | 'zip' | 'cdn';\n  siteName: string;\n  exportDirectory: string;\n  includeLiveOnly: boolean;\n  generateSitemap: boolean;\n  minifyAssets: boolean;\n  includeMedia: boolean;\n}\n\nexport interface ExportResult {\n  success: boolean;\n  message: string;\n  exportPath?: string;\n  fileCount?: number;\n  totalSize?: number;\n}\n\nexport async function exportSite(options: ExportOptions): Promise<ExportResult> {\n  try {\n    const pages = options.includeLiveOnly \n      ? await storage.getPagesByState('Live')\n      : await storage.getPages();\n\n    if (pages.length === 0) {\n      return {\n        success: false,\n        message: 'No pages to export'\n      };\n    }\n\n    const exportDir = path.join(process.cwd(), options.exportDirectory);\n    \n    // Create export directory\n    if (!fs.existsSync(exportDir)) {\n      fs.mkdirSync(exportDir, { recursive: true });\n    }\n\n    let fileCount = 0;\n    let totalSize = 0;\n\n    // Export pages\n    for (const page of pages) {\n      const filename = page.name.toLowerCase().replace(/\\s+/g, '-') + '.html';\n      const filePath = path.join(exportDir, filename);\n      \n      // Combine HTML with embedded CSS and JS\n      const fullHTML = combinePageAssets(page.html, page.css, page.js);\n      \n      fs.writeFileSync(filePath, fullHTML, 'utf8');\n      const stats = fs.statSync(filePath);\n      totalSize += stats.size;\n      fileCount++;\n    }\n\n    // Export media files if requested\n    if (options.includeMedia) {\n      const mediaItems = await storage.getMedia();\n      const mediaDir = path.join(exportDir, 'media');\n      \n      if (!fs.existsSync(mediaDir)) {\n        fs.mkdirSync(mediaDir, { recursive: true });\n      }\n\n      for (const media of mediaItems) {\n        try {\n          if (fs.existsSync(media.path)) {\n            const destPath = path.join(mediaDir, media.filename);\n            fs.copyFileSync(media.path, destPath);\n            totalSize += media.size;\n            fileCount++;\n          }\n        } catch (error) {\n          console.warn(`Failed to copy media file ${media.filename}:`, error);\n        }\n      }\n    }\n\n    // Generate sitemap if requested\n    if (options.generateSitemap) {\n      const sitemap = generateSitemap(pages, options.siteName);\n      const sitemapPath = path.join(exportDir, 'sitemap.xml');\n      fs.writeFileSync(sitemapPath, sitemap, 'utf8');\n      const stats = fs.statSync(sitemapPath);\n      totalSize += stats.size;\n      fileCount++;\n    }\n\n    return {\n      success: true,\n      message: `Successfully exported ${fileCount} files`,\n      exportPath: exportDir,\n      fileCount,\n      totalSize\n    };\n  } catch (error) {\n    console.error('Export failed:', error);\n    return {\n      success: false,\n      message: `Export failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n    };\n  }\n}\n\nfunction combinePageAssets(html: string, css: string, js: string): string {\n  // Insert CSS into head\n  let combinedHTML = html;\n  \n  if (css) {\n    const styleTag = `<style>\\n${css}\\n</style>`;\n    if (combinedHTML.includes('</head>')) {\n      combinedHTML = combinedHTML.replace('</head>', `${styleTag}\\n</head>`);\n    } else {\n      combinedHTML = `<style>\\n${css}\\n</style>\\n${combinedHTML}`;\n    }\n  }\n\n  if (js) {\n    const scriptTag = `<script>\\n${js}\\n</script>`;\n    if (combinedHTML.includes('</body>')) {\n      combinedHTML = combinedHTML.replace('</body>', `${scriptTag}\\n</body>`);\n    } else {\n      combinedHTML = `${combinedHTML}\\n<script>\\n${js}\\n</script>`;\n    }\n  }\n\n  return combinedHTML;\n}\n\nfunction generateSitemap(pages: any[], siteName: string): string {\n  const baseUrl = `https://${siteName}.com`; // This would be configurable in a real app\n  const urls = pages.map(page => {\n    const filename = page.name.toLowerCase().replace(/\\s+/g, '-') + '.html';\n    const loc = filename === 'home.html' ? baseUrl : `${baseUrl}/${filename}`;\n    const lastmod = new Date(page.createdAt).toISOString().split('T')[0];\n    \n    return `  <url>\n    <loc>${loc}</loc>\n    <lastmod>${lastmod}</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.8</priority>\n  </url>`;\n  }).join('\\n');\n\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${urls}\n</urlset>`;\n}\n","size_bytes":4386},"server/services/gemini.ts":{"content":"// PWC GenAI API configuration\nconst PWC_GENAI_API_URL = 'https://genai-sharedservice-americas.pwc.com/completions';\nconst API_KEY = process.env.PWC_API_KEY || process.env.API_KEY || \"\";\n\ninterface PWCGenAIRequest {\n  model: string;\n  prompt: string;\n  presence_penalty: number;\n  seed: number;\n  stop: string | null;\n  stream: boolean;\n  stream_options: null;\n  temperature: number;\n  top_p: number;\n}\n\ninterface PWCGenAIResponse {\n  // Add response interface based on actual API response structure\n  choices?: Array<{\n    text?: string;\n    message?: {\n      content?: string;\n    };\n  }>;\n  content?: string;\n}\n\nexport interface GeneratedPageContent {\n  html: string;\n  css: string;\n  js: string;\n}\n\nexport async function generatePageWithAI(\n  prompt: string, \n  pageType: string,\n  options?: {\n    colorScheme?: string;\n    layoutStyle?: string;\n    includeResponsive?: boolean;\n    includeInteractive?: boolean;\n    includeSEO?: boolean;\n  }\n): Promise<GeneratedPageContent> {\n  try {\n    const systemPrompt = `You are an expert web developer and designer. Generate a complete, professional webpage based on the user's requirements.\n\nRequirements:\n- Generate clean, semantic HTML5\n- Create modern, responsive CSS (use CSS Grid and Flexbox)\n- Include minimal, functional JavaScript if needed\n- Ensure accessibility (ARIA labels, semantic elements)\n- Use modern design principles\n- Make it mobile-responsive by default\n- Include proper meta tags and SEO elements\n- Use professional color schemes and typography\n\nReturn ONLY a JSON object with this exact structure:\n{\n  \"html\": \"complete HTML document with DOCTYPE, head, and body\",\n  \"css\": \"complete CSS styles\",\n  \"js\": \"JavaScript code if needed, or empty string\"\n}\n\nDo not include any markdown formatting or code blocks in your response.`;\n\n    let enhancedPrompt = `Create a ${pageType} page: ${prompt}`;\n    \n    if (options?.colorScheme) {\n      enhancedPrompt += `\\n- Use color scheme: ${options.colorScheme}`;\n    }\n    if (options?.layoutStyle) {\n      enhancedPrompt += `\\n- Layout style: ${options.layoutStyle}`;\n    }\n    if (options?.includeResponsive) {\n      enhancedPrompt += `\\n- Make it fully responsive for mobile, tablet, and desktop`;\n    }\n    if (options?.includeInteractive) {\n      enhancedPrompt += `\\n- Add interactive elements and animations`;\n    }\n    if (options?.includeSEO) {\n      enhancedPrompt += `\\n- Include proper SEO meta tags and structured data`;\n    }\n\n    // Combine system prompt and user prompt for PWC API\n    const fullPrompt = `${systemPrompt}\\n\\nUser Request: ${enhancedPrompt}`;\n\n    const requestBody: PWCGenAIRequest = {\n      model: \"vertex_ai.gemini-2.0-flash\",\n      prompt: fullPrompt,\n      presence_penalty: 0,\n      seed: 25,\n      stop: null,\n      stream: false,\n      stream_options: null,\n      temperature: 1,\n      top_p: 1\n    };\n\n    const response = await fetch(PWC_GENAI_API_URL, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'API-Key': API_KEY,\n        'Authorization': `Bearer ${API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n      throw new Error(`PWC GenAI API error: ${response.status} ${response.statusText}`);\n    }\n\n    const responseData: PWCGenAIResponse = await response.json();\n    \n    // Extract text content from response - adjust based on actual API response structure\n    const rawJson = responseData.choices?.[0]?.text || \n                   responseData.choices?.[0]?.message?.content || \n                   responseData.content || \n                   \"\";\n    if (!rawJson) {\n      throw new Error(\"Empty response from AI model\");\n    }\n\n    const generatedContent: GeneratedPageContent = JSON.parse(rawJson);\n    \n    // Validate the response structure\n    if (!generatedContent.html || typeof generatedContent.html !== 'string') {\n      throw new Error(\"Invalid HTML content generated\");\n    }\n    if (!generatedContent.css || typeof generatedContent.css !== 'string') {\n      throw new Error(\"Invalid CSS content generated\");\n    }\n    if (typeof generatedContent.js !== 'string') {\n      generatedContent.js = ''; // Default to empty string if not provided\n    }\n\n    return generatedContent;\n  } catch (error) {\n    console.error(\"Error generating page with AI:\", error);\n    throw new Error(`Failed to generate page: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function generatePageThumbnail(html: string, css: string): Promise<string> {\n  // For now, return a placeholder base64 image\n  // In a real implementation, you might use a headless browser to capture screenshots\n  return \"data:image/svg+xml;base64,\" + Buffer.from(`\n    <svg width=\"200\" height=\"150\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"200\" height=\"150\" fill=\"#f1f5f9\"/>\n      <rect x=\"20\" y=\"20\" width=\"160\" height=\"20\" fill=\"#e2e8f0\"/>\n      <rect x=\"20\" y=\"50\" width=\"120\" height=\"15\" fill=\"#cbd5e1\"/>\n      <rect x=\"20\" y=\"75\" width=\"140\" height=\"15\" fill=\"#cbd5e1\"/>\n      <rect x=\"20\" y=\"110\" width=\"60\" height=\"25\" fill=\"#3b82f6\"/>\n    </svg>\n  `).toString('base64');\n}\n","size_bytes":5175},"client/src/hooks/use-generations.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Generation } from \"@shared/schema\";\n\nexport function useGenerations() {\n  return useQuery<Generation[]>({\n    queryKey: [\"/api/generations\"],\n  });\n}","size_bytes":213},"client/src/hooks/use-media.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Media } from \"@shared/schema\";\n\nexport function useMedia(search?: string) {\n  return useQuery<Media[]>({\n    queryKey: [\"/api/media\", search],\n  });\n}\n\nexport function useUploadMedia() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (files: FileList) => {\n      const formData = new FormData();\n      Array.from(files).forEach(file => {\n        formData.append('files', file);\n      });\n      \n      const res = await fetch('/api/media/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!res.ok) {\n        throw new Error(`Upload failed: ${res.statusText}`);\n      }\n      \n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/media\"] });\n    },\n  });\n}\n\nexport function useDeleteMedia() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/media/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/media\"] });\n    },\n  });\n}\n","size_bytes":1237},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-pages.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Page, InsertPage } from \"@shared/schema\";\n\nexport function usePages() {\n  return useQuery<Page[]>({\n    queryKey: [\"/api/pages\"],\n  });\n}\n\nexport function usePage(id: string) {\n  return useQuery<Page>({\n    queryKey: [\"/api/pages\", id],\n  });\n}\n\nexport function useCreatePage() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (data: InsertPage) => {\n      const res = await apiRequest(\"POST\", \"/api/pages\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n    },\n  });\n}\n\nexport function useUpdatePage() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertPage> }) => {\n      const res = await apiRequest(\"PUT\", `/api/pages/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n    },\n  });\n}\n\nexport function useDeletePage() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/pages/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n    },\n  });\n}\n\nexport function useUpdatePageState() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, state }: { id: string; state: 'Draft' | 'Live' | 'Expired' }) => {\n      const res = await apiRequest(\"PATCH\", `/api/pages/${id}/state`, { state });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n    },\n  });\n}\n\nexport interface Stats {\n  totalPages: number;\n  livePages: number;\n  draftPages: number;\n  expiredPages: number;\n  mediaFiles: number;\n}\n\nexport function useStats() {\n  return useQuery<Stats>({\n    queryKey: [\"/api/stats\"],\n  });\n}\n","size_bytes":2155},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ai-generator.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Sparkles, Info, Clock, Zap, Code, Eye, Edit, RotateCcw, Upload, FileText } from \"lucide-react\";\n\ninterface GenerationRequest {\n  prompt: string;\n  pageType: string;\n  pageName: string;\n  options: {\n    colorScheme?: string;\n    layoutStyle?: string;\n    includeResponsive?: boolean;\n    includeInteractive?: boolean;\n    includeSEO?: boolean;\n  };\n}\n\ninterface ManualUploadData {\n  name: string;\n  pageType: string;\n  state: string;\n  html: string;\n  css: string;\n  js: string;\n}\n\nexport default function AIGenerator() {\n  const [formData, setFormData] = useState<GenerationRequest>({\n    prompt: \"\",\n    pageType: \"landing\",\n    pageName: \"\",\n    options: {\n      includeResponsive: true,\n      includeSEO: true,\n    }\n  });\n\n  const [uploadData, setUploadData] = useState<ManualUploadData>({\n    name: \"\",\n    pageType: \"landing\",\n    state: \"Draft\",\n    html: \"\",\n    css: \"\",\n    js: \"\"\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: generations } = useQuery<any[]>({\n    queryKey: [\"/api/generations\"],\n  });\n\n  const generateMutation = useMutation({\n    mutationFn: async (data: GenerationRequest) => {\n      const res = await apiRequest(\"POST\", \"/api/generate\", data);\n      return res.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Page generated successfully!\",\n        description: `\"${result.page.name}\" has been created.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      // Reset form\n      setFormData({\n        prompt: \"\",\n        pageType: \"landing\",\n        pageName: \"\",\n        options: {\n          includeResponsive: true,\n          includeSEO: true,\n        }\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Generation failed\",\n        description: error.message || \"Failed to generate page\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: ManualUploadData) => {\n      // Create a simple thumbnail\n      const thumbnail = `data:image/svg+xml;base64,${btoa(`\n        <svg width=\"200\" height=\"150\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"200\" height=\"150\" fill=\"#f3f4f6\"/>\n          <rect x=\"20\" y=\"20\" width=\"160\" height=\"30\" fill=\"#6366f1\"/>\n          <text x=\"100\" y=\"40\" font-family=\"Arial\" font-size=\"14\" fill=\"white\" text-anchor=\"middle\">${data.name}</text>\n          <rect x=\"20\" y=\"70\" width=\"160\" height=\"60\" fill=\"#white\" stroke=\"#e5e7eb\"/>\n          <text x=\"100\" y=\"105\" font-family=\"Arial\" font-size=\"12\" fill=\"#6b7280\" text-anchor=\"middle\">Custom Upload</text>\n        </svg>\n      `)}`;\n\n      const pageData = {\n        ...data,\n        thumbnail\n      };\n\n      const res = await apiRequest(\"POST\", \"/api/pages\", pageData);\n      return res.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Page created successfully!\",\n        description: `\"${result.name}\" has been created from your upload.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      // Reset form\n      setUploadData({\n        name: \"\",\n        pageType: \"landing\",\n        state: \"Draft\",\n        html: \"\",\n        css: \"\",\n        js: \"\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message || \"Failed to create page from upload\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    if (!formData.prompt.trim() || !formData.pageName.trim()) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please provide both a page name and description.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateMutation.mutate(formData);\n  };\n\n  const handleUpload = () => {\n    if (!uploadData.name.trim() || !uploadData.html.trim()) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please provide both a page name and HTML content.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    uploadMutation.mutate(uploadData);\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-slate-900 font-inter\">AI Page Generator</h1>\n            <p className=\"text-slate-500 mt-1\">Generate pages using Google Gemini Flash 2.5</p>\n          </div>\n          <Badge className=\"bg-green-100 text-green-800\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n            Gemini Flash 2.5 Connected\n          </Badge>\n        </div>\n      </header>\n\n      <div className=\"flex-1 p-6 overflow-y-auto\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          {/* Tabs for generation methods */}\n          <Tabs defaultValue=\"ai-generate\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"ai-generate\" className=\"flex items-center gap-2\">\n                <Sparkles className=\"w-4 h-4\" />\n                AI Generation\n              </TabsTrigger>\n              <TabsTrigger value=\"manual-upload\" className=\"flex items-center gap-2\">\n                <Upload className=\"w-4 h-4\" />\n                Manual Upload\n              </TabsTrigger>\n            </TabsList>\n\n            {/* AI Generation Tab */}\n            <TabsContent value=\"ai-generate\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-semibold text-slate-900\">Generate with AI</CardTitle>\n                  <p className=\"text-sm text-slate-500\">Use Google Gemini Flash 2.5 to generate complete pages from descriptions</p>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">Page Type</label>\n                  <Select \n                    value={formData.pageType} \n                    onValueChange={(value) => setFormData(prev => ({ ...prev, pageType: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"landing\">Landing Page</SelectItem>\n                      <SelectItem value=\"dashboard\">Dashboard</SelectItem>\n                      <SelectItem value=\"contact\">Contact Form</SelectItem>\n                      <SelectItem value=\"blog\">Blog Post</SelectItem>\n                      <SelectItem value=\"analytics\">Analytics Page</SelectItem>\n                      <SelectItem value=\"portfolio\">Portfolio</SelectItem>\n                      <SelectItem value=\"ecommerce\">E-commerce</SelectItem>\n                      <SelectItem value=\"custom\">Custom</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">Page Name</label>\n                  <Input\n                    placeholder=\"Enter page name\"\n                    value={formData.pageName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, pageName: e.target.value }))}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Description & Requirements\n                  <span className=\"text-xs text-slate-500 ml-1\">(Be specific for better results)</span>\n                </label>\n                <Textarea\n                  rows={6}\n                  placeholder=\"Describe what you want the page to include...\n\nExample: Create a modern landing page for a SaaS product with:\n- Hero section with compelling headline\n- Feature showcase with icons\n- Pricing table with 3 tiers\n- Customer testimonials\n- Contact form in footer\n- Blue and white color scheme\n- Mobile responsive design\"\n                  value={formData.prompt}\n                  onChange={(e) => setFormData(prev => ({ ...prev, prompt: e.target.value }))}\n                />\n              </div>\n\n              {/* Advanced Options */}\n              <details className=\"border border-slate-200 rounded-lg\">\n                <summary className=\"px-4 py-3 cursor-pointer font-medium text-slate-700 hover:bg-slate-50\">\n                  Advanced Options\n                </summary>\n                <div className=\"p-4 border-t border-slate-200 space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-700 mb-2\">Color Scheme</label>\n                      <Input\n                        placeholder=\"e.g., blue and white, dark theme\"\n                        value={formData.options.colorScheme || \"\"}\n                        onChange={(e) => setFormData(prev => ({\n                          ...prev,\n                          options: { ...prev.options, colorScheme: e.target.value }\n                        }))}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-700 mb-2\">Layout Style</label>\n                      <Select \n                        value={formData.options.layoutStyle || \"\"} \n                        onValueChange={(value) => setFormData(prev => ({\n                          ...prev,\n                          options: { ...prev.options, layoutStyle: value }\n                        }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select style\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"modern\">Modern</SelectItem>\n                          <SelectItem value=\"minimal\">Minimal</SelectItem>\n                          <SelectItem value=\"creative\">Creative</SelectItem>\n                          <SelectItem value=\"corporate\">Corporate</SelectItem>\n                          <SelectItem value=\"playful\">Playful</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"responsive\"\n                        checked={formData.options.includeResponsive || false}\n                        onCheckedChange={(checked) => setFormData(prev => ({\n                          ...prev,\n                          options: { ...prev.options, includeResponsive: checked as boolean }\n                        }))}\n                      />\n                      <label htmlFor=\"responsive\" className=\"text-sm text-slate-700\">\n                        Include responsive design\n                      </label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"interactive\"\n                        checked={formData.options.includeInteractive || false}\n                        onCheckedChange={(checked) => setFormData(prev => ({\n                          ...prev,\n                          options: { ...prev.options, includeInteractive: checked as boolean }\n                        }))}\n                      />\n                      <label htmlFor=\"interactive\" className=\"text-sm text-slate-700\">\n                        Include interactive elements\n                      </label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"seo\"\n                        checked={formData.options.includeSEO || false}\n                        onCheckedChange={(checked) => setFormData(prev => ({\n                          ...prev,\n                          options: { ...prev.options, includeSEO: checked as boolean }\n                        }))}\n                      />\n                      <label htmlFor=\"seo\" className=\"text-sm text-slate-700\">\n                        Include SEO optimization\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </details>\n\n              <Button \n                onClick={handleGenerate} \n                className=\"w-full\" \n                disabled={generateMutation.isPending}\n                size=\"lg\"\n              >\n                {generateMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Generating Page...\n                  </>\n                ) : (\n                  <>\n                    <Sparkles className=\"mr-2 h-4 w-4\" />\n                    Generate Page with AI\n                  </>\n                )}\n              </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Manual Upload Tab */}\n            <TabsContent value=\"manual-upload\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-semibold text-slate-900\">Manual Upload</CardTitle>\n                  <p className=\"text-sm text-slate-500\">Upload your own HTML, CSS, and JavaScript code</p>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"upload-name\">Page Name</Label>\n                      <Input\n                        id=\"upload-name\"\n                        placeholder=\"Enter page name\"\n                        value={uploadData.name}\n                        onChange={(e) => setUploadData(prev => ({ ...prev, name: e.target.value }))}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"upload-type\">Page Type</Label>\n                      <Select \n                        value={uploadData.pageType} \n                        onValueChange={(value) => setUploadData(prev => ({ ...prev, pageType: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"landing\">Landing Page</SelectItem>\n                          <SelectItem value=\"dashboard\">Dashboard</SelectItem>\n                          <SelectItem value=\"contact\">Contact Form</SelectItem>\n                          <SelectItem value=\"blog\">Blog Post</SelectItem>\n                          <SelectItem value=\"portfolio\">Portfolio</SelectItem>\n                          <SelectItem value=\"ecommerce\">E-commerce</SelectItem>\n                          <SelectItem value=\"custom\">Custom</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"upload-state\">Page State</Label>\n                    <Select \n                      value={uploadData.state} \n                      onValueChange={(value) => setUploadData(prev => ({ ...prev, state: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Draft\">Draft</SelectItem>\n                        <SelectItem value=\"Live\">Live</SelectItem>\n                        <SelectItem value=\"Expired\">Expired</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"upload-html\">HTML Content *</Label>\n                    <Textarea\n                      id=\"upload-html\"\n                      rows={8}\n                      placeholder=\"Paste your HTML code here...\"\n                      value={uploadData.html}\n                      onChange={(e) => setUploadData(prev => ({ ...prev, html: e.target.value }))}\n                      className=\"font-mono text-sm\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"upload-css\">CSS Styles (optional)</Label>\n                    <Textarea\n                      id=\"upload-css\"\n                      rows={6}\n                      placeholder=\"Paste your CSS code here...\"\n                      value={uploadData.css}\n                      onChange={(e) => setUploadData(prev => ({ ...prev, css: e.target.value }))}\n                      className=\"font-mono text-sm\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"upload-js\">JavaScript (optional)</Label>\n                    <Textarea\n                      id=\"upload-js\"\n                      rows={4}\n                      placeholder=\"Paste your JavaScript code here...\"\n                      value={uploadData.js}\n                      onChange={(e) => setUploadData(prev => ({ ...prev, js: e.target.value }))}\n                      className=\"font-mono text-sm\"\n                    />\n                  </div>\n\n                  <Button \n                    onClick={handleUpload} \n                    className=\"w-full\" \n                    disabled={uploadMutation.isPending}\n                    size=\"lg\"\n                  >\n                    {uploadMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Creating Page...\n                      </>\n                    ) : (\n                      <>\n                        <Upload className=\"mr-2 h-4 w-4\" />\n                        Create Page from Upload\n                      </>\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          {/* Generation History */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-slate-900\">Recent Generations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!generations || generations.length === 0 ? (\n                <div className=\"text-center py-8 text-slate-500\">\n                  No generations yet. Create your first AI-generated page above!\n                </div>\n              ) : (\n                <div className=\"divide-y divide-slate-200\">\n                  {generations.map((generation: any) => (\n                    <div key={generation.id} className=\"py-6 hover:bg-slate-50\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center mb-2\">\n                            <h3 className=\"font-medium text-slate-900 mr-3\">\n                              {generation.pageId ? `Page Generated` : generation.pageType}\n                            </h3>\n                            <Badge className={\n                              generation.status === 'completed' ? 'bg-green-100 text-green-800' :\n                              generation.status === 'failed' ? 'bg-red-100 text-red-800' :\n                              'bg-yellow-100 text-yellow-800'\n                            }>\n                              {generation.status === 'completed' && <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1\"></div>}\n                              {generation.status === 'failed' && <div className=\"w-2 h-2 bg-red-500 rounded-full mr-1\"></div>}\n                              {generation.status === 'processing' && <div className=\"w-2 h-2 bg-yellow-500 rounded-full mr-1 animate-pulse\"></div>}\n                              {generation.status}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-slate-600 mb-3 line-clamp-2\">\n                            {generation.prompt}\n                          </p>\n                          <div className=\"flex items-center text-xs text-slate-500 space-x-4\">\n                            <span className=\"flex items-center\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              {new Date(generation.createdAt).toLocaleString()}\n                            </span>\n                            {generation.duration && (\n                              <span className=\"flex items-center\">\n                                <Zap className=\"h-3 w-3 mr-1\" />\n                                Generated in {(generation.duration / 1000).toFixed(1)}s\n                              </span>\n                            )}\n                            {generation.status === 'completed' && (\n                              <span className=\"flex items-center\">\n                                <Code className=\"h-3 w-3 mr-1\" />\n                                HTML, CSS & JS\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          {generation.status === 'completed' && (\n                            <>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Eye className=\"mr-1 h-3 w-3\" />\n                                Preview\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Edit className=\"mr-1 h-3 w-3\" />\n                                Edit\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <RotateCcw className=\"mr-1 h-3 w-3\" />\n                                Regenerate\n                              </Button>\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":23606},"client/src/pages/dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { usePages, useStats, useDeletePage, useUpdatePageState, type Stats } from \"@/hooks/use-pages\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Globe, Plus, Search, FileText, Eye, PencilIcon, Trash2, CheckCircle, Play, StopCircle, MoreHorizontal } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useState } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Dashboard() {\n  const { data: pages, isLoading: pagesLoading } = usePages();\n  const { data: stats, isLoading: statsLoading } = useStats();\n  const { mutate: deletePage } = useDeletePage();\n  const { mutate: updatePageState } = useUpdatePageState();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [search, setSearch] = useState(\"\");\n  const [stateFilter, setStateFilter] = useState(\"all\");\n\n  // Submit for approval mutation\n  const submitForApprovalMutation = useMutation({\n    mutationFn: async (pageId: string) => {\n      const response = await fetch(`/api/pages/${pageId}/submit-for-approval`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pages'] });\n    }\n  });\n\n  const filteredPages = pages?.filter(page => {\n    const matchesSearch = page.name.toLowerCase().includes(search.toLowerCase());\n    const matchesState = stateFilter === \"all\" || page.state.toLowerCase() === stateFilter.toLowerCase();\n    return matchesSearch && matchesState;\n  });\n\n  const handleDeletePage = (id: string, name: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${name}\"?`)) {\n      deletePage(id, {\n        onSuccess: () => {\n          toast({\n            title: \"Page deleted\",\n            description: `\"${name}\" has been deleted successfully.`,\n          });\n        },\n        onError: () => {\n          toast({\n            title: \"Error\",\n            description: \"Failed to delete page.\",\n            variant: \"destructive\",\n          });\n        }\n      });\n    }\n  };\n\n  const handleStateChange = (id: string, name: string, newState: 'Draft' | 'Live' | 'Expired') => {\n    const stateActions = {\n      'Live': 'publish',\n      'Draft': 'move to draft',\n      'Expired': 'expire'\n    };\n    \n    const action = stateActions[newState];\n    if (window.confirm(`Are you sure you want to ${action} \"${name}\"?`)) {\n      updatePageState({ id, state: newState }, {\n        onSuccess: () => {\n          toast({\n            title: \"Page updated\",\n            description: `\"${name}\" has been ${newState === 'Live' ? 'published' : newState === 'Draft' ? 'moved to draft' : 'expired'} successfully.`,\n          });\n        },\n        onError: () => {\n          toast({\n            title: \"Error\",\n            description: `Failed to ${action} page.`,\n            variant: \"destructive\",\n          });\n        }\n      });\n    }\n  };\n\n  const submitForApproval = (pageId: string) => {\n    const page = pages?.find(p => p.id === pageId);\n    if (window.confirm(`Submit \"${page?.name}\" for approval?`)) {\n      submitForApprovalMutation.mutate(pageId, {\n        onSuccess: () => {\n          toast({\n            title: \"Page submitted\",\n            description: `\"${page?.name}\" has been submitted for approval.`,\n          });\n        },\n        onError: () => {\n          toast({\n            title: \"Error\",\n            description: \"Failed to submit page for approval.\",\n            variant: \"destructive\",\n          });\n        }\n      });\n    }\n  };\n\n  const getStateColor = (state: string) => {\n    switch (state) {\n      case \"Live\":\n        return \"bg-green-100 text-green-800 hover:bg-green-200\";\n      case \"Draft\":\n        return \"bg-yellow-100 text-yellow-800 hover:bg-yellow-200\";\n      case \"Pending_Approval\":\n        return \"bg-blue-100 text-blue-800 hover:bg-blue-200\";\n      case \"Approved\":\n        return \"bg-emerald-100 text-emerald-800 hover:bg-emerald-200\";\n      case \"Rejected\":\n        return \"bg-red-100 text-red-800 hover:bg-red-200\";\n      case \"Expired\":\n        return \"bg-gray-100 text-gray-800 hover:bg-gray-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 hover:bg-gray-200\";\n    }\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-slate-900 font-inter\">Dashboard</h1>\n            <p className=\"text-slate-500 mt-1\">Manage your AI-generated pages and site structure</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"outline\" \n              className=\"bg-accent text-white hover:bg-accent/90\"\n              onClick={() => {\n                const livePages = pages?.filter(p => p.state === 'Live') || [];\n                if (livePages.length === 0) {\n                  toast({\n                    title: \"No published pages\",\n                    description: \"Create and publish pages first to view your site\",\n                    variant: \"destructive\",\n                  });\n                } else {\n                  window.open(`/preview/${livePages[0].id}`, '_blank');\n                }\n              }}\n            >\n              <Globe className=\"mr-2 h-4 w-4\" />\n              View Site\n            </Button>\n            <Link href=\"/ai-generator\">\n              <Button className=\"bg-primary hover:bg-primary/90\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Generate Page\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex-1 p-6 overflow-y-auto\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-500\">Total Pages</p>\n                  <p className=\"text-2xl font-bold text-slate-900 mt-1\">\n                    {statsLoading ? \"...\" : stats?.totalPages || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"h-6 w-6 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-500\">Live Pages</p>\n                  <p className=\"text-2xl font-bold text-slate-900 mt-1\">\n                    {statsLoading ? \"...\" : stats?.livePages || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Eye className=\"h-6 w-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-500\">Draft Pages</p>\n                  <p className=\"text-2xl font-bold text-slate-900 mt-1\">\n                    {statsLoading ? \"...\" : stats?.draftPages || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <PencilIcon className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-500\">Media Files</p>\n                  <p className=\"text-2xl font-bold text-slate-900 mt-1\">\n                    {statsLoading ? \"...\" : stats?.mediaFiles || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"h-6 w-6 text-purple-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Pages Table */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg font-semibold text-slate-900\">Recent Pages</CardTitle>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"relative\">\n                  <Input\n                    placeholder=\"Search pages...\"\n                    value={search}\n                    onChange={(e) => setSearch(e.target.value)}\n                    className=\"pl-10 pr-4 py-2\"\n                  />\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400\" />\n                </div>\n                <Select value={stateFilter} onValueChange={setStateFilter}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All States</SelectItem>\n                    <SelectItem value=\"draft\">Draft</SelectItem>\n                    <SelectItem value=\"pending_approval\">Pending Approval</SelectItem>\n                    <SelectItem value=\"approved\">Approved</SelectItem>\n                    <SelectItem value=\"rejected\">Rejected</SelectItem>\n                    <SelectItem value=\"live\">Live</SelectItem>\n                    <SelectItem value=\"expired\">Expired</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"p-0\">\n            {pagesLoading ? (\n              <div className=\"p-6\">Loading pages...</div>\n            ) : !filteredPages || filteredPages.length === 0 ? (\n              <div className=\"p-6 text-center text-slate-500\">\n                {search || stateFilter !== \"all\" ? \"No pages match your filters.\" : \"No pages created yet.\"}\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-slate-50 border-b border-slate-200\">\n                    <tr>\n                      <th className=\"text-left py-3 px-6 font-medium text-slate-700 text-sm\">Page Name</th>\n                      <th className=\"text-left py-3 px-6 font-medium text-slate-700 text-sm\">State</th>\n                      <th className=\"text-left py-3 px-6 font-medium text-slate-700 text-sm\">Created</th>\n                      <th className=\"text-left py-3 px-6 font-medium text-slate-700 text-sm\">Publish Date</th>\n                      <th className=\"text-left py-3 px-6 font-medium text-slate-700 text-sm\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-slate-200\">\n                    {filteredPages.map((page) => (\n                      <tr key={page.id} className=\"hover:bg-slate-50\">\n                        <td className=\"py-4 px-6\">\n                          <div className=\"flex items-center\">\n                            <div className=\"w-10 h-10 bg-slate-200 rounded-lg mr-3 flex items-center justify-center\">\n                              <FileText className=\"h-5 w-5 text-slate-500\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-slate-900\">{page.name}</p>\n                              <p className=\"text-sm text-slate-500\">AI Generated</p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <Badge className={getStateColor(page.state)}>\n                            {page.state}\n                          </Badge>\n                        </td>\n                        <td className=\"py-4 px-6 text-sm text-slate-500\">\n                          {formatDistanceToNow(new Date(page.createdAt), { addSuffix: true })}\n                        </td>\n                        <td className=\"py-4 px-6 text-sm text-slate-500\">\n                          {page.publishAt ? new Date(page.publishAt).toLocaleDateString() : \"Not scheduled\"}\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <div className=\"flex items-center space-x-2\">\n                            {/* Quick State Actions */}\n                            {page.state === 'Draft' && (\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => submitForApproval(page.id)}\n                                className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                                title=\"Submit for Approval\"\n                                data-testid={`button-submit-${page.id}`}\n                              >\n                                <CheckCircle className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                            {page.state === 'Approved' && (\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => handleStateChange(page.id, page.name, 'Live')}\n                                className=\"text-green-600 hover:text-green-700 hover:bg-green-50\"\n                                title=\"Publish Live\"\n                                data-testid={`button-publish-${page.id}`}\n                              >\n                                <Play className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                            {page.state === 'Live' && (\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => handleStateChange(page.id, page.name, 'Draft')}\n                                className=\"text-yellow-600 hover:text-yellow-700 hover:bg-yellow-50\"\n                                title=\"Move to Draft\"\n                              >\n                                <StopCircle className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                            \n                            {/* Standard Actions */}\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              title=\"Preview\"\n                              onClick={() => {\n                                if (page.state === 'Live') {\n                                  window.open(`/preview/${page.id}`, '_blank');\n                                } else {\n                                  toast({\n                                    title: \"Cannot preview\",\n                                    description: \"Page must be published (Live) to preview\",\n                                    variant: \"destructive\",\n                                  });\n                                }\n                              }}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            \n                            {/* More Actions Dropdown */}\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <MoreHorizontal className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem>\n                                  <PencilIcon className=\"mr-2 h-4 w-4\" />\n                                  Edit Page\n                                </DropdownMenuItem>\n                                \n                                {/* State Change Options */}\n                                {page.state !== 'Live' && (\n                                  <DropdownMenuItem onClick={() => handleStateChange(page.id, page.name, 'Live')}>\n                                    <Play className=\"mr-2 h-4 w-4\" />\n                                    Publish Live\n                                  </DropdownMenuItem>\n                                )}\n                                {page.state !== 'Draft' && (\n                                  <DropdownMenuItem onClick={() => handleStateChange(page.id, page.name, 'Draft')}>\n                                    <PencilIcon className=\"mr-2 h-4 w-4\" />\n                                    Move to Draft\n                                  </DropdownMenuItem>\n                                )}\n                                {page.state !== 'Expired' && (\n                                  <DropdownMenuItem onClick={() => handleStateChange(page.id, page.name, 'Expired')}>\n                                    <StopCircle className=\"mr-2 h-4 w-4\" />\n                                    Mark as Expired\n                                  </DropdownMenuItem>\n                                )}\n                                \n                                <DropdownMenuItem \n                                  onClick={() => handleDeletePage(page.id, page.name)}\n                                  className=\"text-red-600 focus:text-red-600\"\n                                >\n                                  <Trash2 className=\"mr-2 h-4 w-4\" />\n                                  Delete Page\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":19224},"client/src/pages/export.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { usePages, useStats, type Stats } from \"@/hooks/use-pages\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Download, Eye, Globe, File, Clock, Trash2 } from \"lucide-react\";\n\ninterface ExportOptions {\n  format: 'static' | 'zip' | 'cdn';\n  siteName: string;\n  exportDirectory: string;\n  includeLiveOnly: boolean;\n  generateSitemap: boolean;\n  minifyAssets: boolean;\n  includeMedia: boolean;\n}\n\nexport default function Export() {\n  const { data: pages } = usePages();\n  const { data: stats } = useStats();\n  const { toast } = useToast();\n\n  const [exportOptions, setExportOptions] = useState<ExportOptions>({\n    format: 'static',\n    siteName: 'my-ai-website',\n    exportDirectory: '/exports/my-ai-website',\n    includeLiveOnly: true,\n    generateSitemap: true,\n    minifyAssets: false,\n    includeMedia: true,\n  });\n\n  const [selectedPages, setSelectedPages] = useState<Set<string>>(new Set());\n\n  const exportMutation = useMutation({\n    mutationFn: async (options: ExportOptions) => {\n      const res = await apiRequest(\"POST\", \"/api/export\", options);\n      return res.json();\n    },\n    onSuccess: (result) => {\n      if (result.success) {\n        toast({\n          title: \"Export successful\",\n          description: result.message,\n        });\n      } else {\n        toast({\n          title: \"Export failed\",\n          description: result.message,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Export failed\",\n        description: error.message || \"Failed to export site\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const livePages = pages?.filter(p => p.state === 'Live') || [];\n  const pagesToShow = exportOptions.includeLiveOnly ? livePages : pages || [];\n\n  const handlePageToggle = (pageId: string, checked: boolean) => {\n    const newSelected = new Set(selectedPages);\n    if (checked) {\n      newSelected.add(pageId);\n    } else {\n      newSelected.delete(pageId);\n    }\n    setSelectedPages(newSelected);\n  };\n\n  const handleExport = () => {\n    exportMutation.mutate(exportOptions);\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-slate-900 font-inter\">Export & Publish</h1>\n            <p className=\"text-slate-500 mt-1\">Generate and deploy your static website</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"text-sm text-slate-500\">\n              Last export: <span className=\"font-medium\">Never</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex-1 p-6 overflow-y-auto\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          {/* Export Options */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-slate-900\">Export Configuration</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-slate-700 mb-3 block\">Export Format</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                  {[\n                    { value: 'static', title: 'Static HTML', desc: 'HTML/CSS/JS files' },\n                    { value: 'zip', title: 'ZIP Archive', desc: 'Compressed download' },\n                    { value: 'cdn', title: 'CDN Ready', desc: 'Optimized for hosting' },\n                  ].map((format) => (\n                    <Label\n                      key={format.value}\n                      className=\"flex items-center p-3 border border-slate-300 rounded-lg hover:border-primary cursor-pointer\"\n                    >\n                      <input\n                        type=\"radio\"\n                        name=\"export-format\"\n                        value={format.value}\n                        checked={exportOptions.format === format.value}\n                        onChange={(e) => setExportOptions(prev => ({ ...prev, format: e.target.value as any }))}\n                        className=\"text-primary focus:ring-primary mr-3\"\n                      />\n                      <div>\n                        <div className=\"font-medium text-slate-900\">{format.title}</div>\n                        <div className=\"text-xs text-slate-500\">{format.desc}</div>\n                      </div>\n                    </Label>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"siteName\" className=\"text-sm font-medium text-slate-700\">Site Name</Label>\n                  <Input\n                    id=\"siteName\"\n                    value={exportOptions.siteName}\n                    onChange={(e) => setExportOptions(prev => ({ ...prev, siteName: e.target.value }))}\n                    className=\"mt-2\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"exportDir\" className=\"text-sm font-medium text-slate-700\">Export Directory</Label>\n                  <Input\n                    id=\"exportDir\"\n                    value={exportOptions.exportDirectory}\n                    onChange={(e) => setExportOptions(prev => ({ ...prev, exportDirectory: e.target.value }))}\n                    className=\"mt-2\"\n                  />\n                </div>\n              </div>\n\n              {/* Export Options */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"liveOnly\"\n                    checked={exportOptions.includeLiveOnly}\n                    onCheckedChange={(checked) => setExportOptions(prev => ({ ...prev, includeLiveOnly: checked as boolean }))}\n                  />\n                  <Label htmlFor=\"liveOnly\" className=\"text-sm text-slate-700\">\n                    Include Live pages only\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"sitemap\"\n                    checked={exportOptions.generateSitemap}\n                    onCheckedChange={(checked) => setExportOptions(prev => ({ ...prev, generateSitemap: checked as boolean }))}\n                  />\n                  <Label htmlFor=\"sitemap\" className=\"text-sm text-slate-700\">\n                    Generate sitemap.xml\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"minify\"\n                    checked={exportOptions.minifyAssets}\n                    onCheckedChange={(checked) => setExportOptions(prev => ({ ...prev, minifyAssets: checked as boolean }))}\n                  />\n                  <Label htmlFor=\"minify\" className=\"text-sm text-slate-700\">\n                    Minify CSS and JavaScript\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"media\"\n                    checked={exportOptions.includeMedia}\n                    onCheckedChange={(checked) => setExportOptions(prev => ({ ...prev, includeMedia: checked as boolean }))}\n                  />\n                  <Label htmlFor=\"media\" className=\"text-sm text-slate-700\">\n                    Include media files\n                  </Label>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Pages to Export */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-slate-900\">Pages to Export</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {pagesToShow.length === 0 ? (\n                <div className=\"text-center py-8 text-slate-500\">\n                  No pages available for export.\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {pagesToShow.map((page) => (\n                    <Label\n                      key={page.id}\n                      className=\"flex items-center p-3 border border-slate-200 rounded-lg hover:bg-slate-50 cursor-pointer\"\n                    >\n                      <Checkbox\n                        checked={selectedPages.has(page.id)}\n                        onCheckedChange={(checked) => handlePageToggle(page.id, checked as boolean)}\n                        className=\"mr-3\"\n                      />\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium text-slate-900\">{page.name}</div>\n                            <div className=\"text-sm text-slate-500\">/{page.name.toLowerCase().replace(/\\s+/g, '-')}.html</div>\n                          </div>\n                          <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${\n                            page.state === 'Live' ? 'bg-green-100 text-green-800' :\n                            page.state === 'Draft' ? 'bg-yellow-100 text-yellow-800' :\n                            'bg-red-100 text-red-800'\n                          }`}>\n                            <div className={`w-1 h-1 rounded-full mr-1 ${\n                              page.state === 'Live' ? 'bg-green-500' :\n                              page.state === 'Draft' ? 'bg-yellow-500' :\n                              'bg-red-500'\n                            }`}></div>\n                            {page.state}\n                          </span>\n                        </div>\n                      </div>\n                    </Label>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Export Actions */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-medium text-slate-900\">Ready to Export</h3>\n                  <p className=\"text-sm text-slate-500 mt-1\">\n                    {selectedPages.size} pages selected • \n                    {stats?.mediaFiles || 0} media files • \n                    Estimated size: 2.3 MB\n                  </p>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => {\n                      const livePages = pages?.filter(p => p.state === 'Live') || [];\n                      if (livePages.length === 0) {\n                        toast({\n                          title: \"No live pages\",\n                          description: \"You need to publish at least one page to preview your site\",\n                          variant: \"destructive\",\n                        });\n                      } else if (livePages.length === 1) {\n                        window.open(`/preview/${livePages[0].id}`, '_blank');\n                      } else {\n                        // Show a list of live pages to choose from\n                        toast({\n                          title: \"Multiple live pages\",\n                          description: \"Click preview buttons in the dashboard to view individual pages\",\n                        });\n                      }\n                    }}\n                  >\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    Preview\n                  </Button>\n                  <Button \n                    onClick={handleExport}\n                    disabled={exportMutation.isPending || selectedPages.size === 0}\n                  >\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    {exportMutation.isPending ? 'Exporting...' : 'Export Site'}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Export History */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-slate-900\">Export History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-slate-500\">\n                No exports yet. Create your first export above!\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":13104},"client/src/pages/flow-editor.tsx":{"content":"import React, { useState, useCallback } from \"react\";\nimport ReactFlow, {\n  Background,\n  Controls,\n  MiniMap,\n  addEdge,\n  useNodesState,\n  useEdgesState,\n  Connection,\n  Edge,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { usePages } from \"@/hooks/use-pages\";\nimport { useComponents, useCreateComponent, useAddComponentToPage } from \"@/hooks/use-components\";\nimport { useLinks, useCreateLink } from \"@/hooks/use-links\";\nimport FlowNode from \"@/components/flow/flow-node\";\nimport { ZoomIn, ZoomOut, Save, Plus, Component as ComponentIcon, Link2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst nodeTypes = {\n  pageNode: FlowNode,\n};\n\nexport default function FlowEditor() {\n  const { data: pages } = usePages();\n  const { data: components } = useComponents();\n  const { data: links } = useLinks();\n  const { mutate: createComponent } = useCreateComponent();\n  const { mutate: addComponentToPage } = useAddComponentToPage();\n  const { mutate: createLink } = useCreateLink();\n  const { toast } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  \n  // Component creation state\n  const [selectedPage, setSelectedPage] = useState<string>(\"\");\n  const [componentName, setComponentName] = useState(\"\");\n  const [componentSelector, setComponentSelector] = useState(\"\");\n  const [componentDescription, setComponentDescription] = useState(\"\");\n  \n  // Component addition state\n  const [targetPageId, setTargetPageId] = useState<string>(\"\");\n  const [selectedComponentId, setSelectedComponentId] = useState<string>(\"\");\n  \n  // Page linking state\n  const [fromPageId, setFromPageId] = useState<string>(\"\");\n  const [toPageId, setToPageId] = useState<string>(\"\");\n  const [triggerText, setTriggerText] = useState(\"\");\n  const [linkType, setLinkType] = useState<\"button\" | \"link\">(\"button\");\n\n  // Generate nodes from pages data\n  React.useEffect(() => {\n    if (pages) {\n      const generatedNodes = pages.map((page, index) => ({\n        id: page.id,\n        type: 'pageNode',\n        position: { \n          x: 100 + (index % 3) * 350, \n          y: 100 + Math.floor(index / 3) * 250 \n        },\n        data: { page },\n      }));\n      setNodes(generatedNodes);\n    }\n  }, [pages, setNodes]);\n\n  // Generate edges from page navigation links\n  React.useEffect(() => {\n    if (links) {\n      const generatedEdges = links.map(link => ({\n        id: link.id,\n        source: link.fromPageId,\n        target: link.toPageId,\n        label: link.triggerText,\n        type: 'smoothstep',\n        style: { stroke: '#3b82f6', strokeWidth: 2 },\n        labelStyle: { fontSize: '12px', fontWeight: 'bold' },\n        labelBgStyle: { fill: '#dbeafe', padding: '2px 4px', borderRadius: '4px' },\n      }));\n\n      setEdges(generatedEdges);\n    }\n  }, [links, setEdges]);\n\n  const onConnect = useCallback(\n    (params: Connection) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges]\n  );\n\n  // Function to extract component from page\n  const extractComponent = async () => {\n    if (!selectedPage || !componentName || !componentSelector) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const sourcePage = pages?.find(p => p.id === selectedPage);\n    if (!sourcePage) {\n      toast({\n        title: \"Page not found\",\n        description: \"Selected page does not exist\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Extract component HTML (simplified version)\n    const componentData = {\n      name: componentName,\n      sourcePageId: selectedPage,\n      selector: componentSelector,\n      html: `<div class=\"${componentName.toLowerCase().replace(/\\s+/g, '-')}-component\">\n  <!-- Extracted from ${sourcePage.name} using selector: ${componentSelector} -->\n  <div class=\"component-content\">\n    <!-- Component content would be extracted here -->\n    <p>Reusable ${componentName} component</p>\n  </div>\n</div>`,\n      css: `.${componentName.toLowerCase().replace(/\\s+/g, '-')}-component {\n  padding: 1rem;\n  border: 1px solid #e2e8f0;\n  border-radius: 0.5rem;\n  background-color: #ffffff;\n  margin: 1rem 0;\n}\n\n.${componentName.toLowerCase().replace(/\\s+/g, '-')}-component .component-content {\n  /* Component-specific styles */\n}`,\n      description: componentDescription,\n    };\n\n    createComponent(componentData, {\n      onSuccess: () => {\n        toast({\n          title: \"Component created\",\n          description: `\"${componentName}\" has been extracted successfully`,\n        });\n        setComponentName(\"\");\n        setComponentSelector(\"\");\n        setComponentDescription(\"\");\n        setSelectedPage(\"\");\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create component\",\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  // Function to add component to page\n  const addComponentToTargetPage = async () => {\n    if (!targetPageId || !selectedComponentId) {\n      toast({\n        title: \"Missing selection\",\n        description: \"Please select both a component and target page\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const pageComponentData = {\n      pageId: targetPageId,\n      componentId: selectedComponentId,\n      position: 0,\n    };\n\n    addComponentToPage(pageComponentData, {\n      onSuccess: () => {\n        const component = components?.find(c => c.id === selectedComponentId);\n        const targetPage = pages?.find(p => p.id === targetPageId);\n        toast({\n          title: \"Component added\",\n          description: `\"${component?.name}\" added to \"${targetPage?.name}\"`,\n        });\n        setTargetPageId(\"\");\n        setSelectedComponentId(\"\");\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to add component to page\",\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  // Function to create page navigation link\n  const createPageLink = async () => {\n    if (!fromPageId || !toPageId || !triggerText) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all required fields for the page link\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const linkData = {\n      fromPageId,\n      toPageId,\n      triggerText,\n      linkType,\n      fromElementId: `.${triggerText.toLowerCase().replace(/\\s+/g, '-')}-trigger`,\n    };\n\n    createLink(linkData, {\n      onSuccess: () => {\n        const fromPage = pages?.find(p => p.id === fromPageId);\n        const toPage = pages?.find(p => p.id === toPageId);\n        toast({\n          title: \"Page link created\",\n          description: `\"${triggerText}\" on \"${fromPage?.name}\" now links to \"${toPage?.name}\"`,\n        });\n        setFromPageId(\"\");\n        setToPageId(\"\");\n        setTriggerText(\"\");\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create page link\",\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-slate-900 font-inter\">Page Flow Editor</h1>\n            <p className=\"text-slate-500 mt-1\">Visual page connections and navigation flow</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\">\n                  <ComponentIcon className=\"mr-2 h-4 w-4\" />\n                  Extract Component\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Extract Component from Page</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"sourcePage\">Source Page</Label>\n                    <Select value={selectedPage} onValueChange={setSelectedPage}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a page\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {pages?.map((page) => (\n                          <SelectItem key={page.id} value={page.id}>\n                            {page.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"componentName\">Component Name</Label>\n                    <Input\n                      id=\"componentName\"\n                      value={componentName}\n                      onChange={(e) => setComponentName(e.target.value)}\n                      placeholder=\"Header, Navigation, Footer...\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"selector\">CSS Selector</Label>\n                    <Input\n                      id=\"selector\"\n                      value={componentSelector}\n                      onChange={(e) => setComponentSelector(e.target.value)}\n                      placeholder=\".header, #navigation, .card\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"description\">Description (Optional)</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={componentDescription}\n                      onChange={(e) => setComponentDescription(e.target.value)}\n                      placeholder=\"Brief description of this component\"\n                      rows={2}\n                    />\n                  </div>\n                  \n                  <Button onClick={extractComponent} className=\"w-full\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Create Component\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\">\n                  <Link2 className=\"mr-2 h-4 w-4\" />\n                  Create Page Link\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Create Navigation Link Between Pages</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"fromPage\">From Page (with clickable element)</Label>\n                    <Select value={fromPageId} onValueChange={setFromPageId}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select source page\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {pages?.map((page) => (\n                          <SelectItem key={page.id} value={page.id}>\n                            {page.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"triggerText\">Clickable Element Text</Label>\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        id=\"triggerText\"\n                        value={triggerText}\n                        onChange={(e) => setTriggerText(e.target.value)}\n                        placeholder=\"Settings, About, Contact...\"\n                      />\n                      <Button \n                        type=\"button\"\n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={async () => {\n                          if (!fromPageId) {\n                            alert('Please select a source page first');\n                            return;\n                          }\n                          try {\n                            const response = await fetch(`/api/pages/${fromPageId}/clickable-elements`);\n                            const elements = await response.json();\n                            \n                            if (elements.length > 0) {\n                              // Show all found elements for user to choose from\n                              const elementTexts = elements.map((el: any) => `${el.text} (${el.type})`).join('\\n');\n                              const selectedIndex = prompt(\n                                `Found ${elements.length} clickable elements:\\n\\n${elementTexts}\\n\\nEnter the number (1-${elements.length}) to select:`,\n                                '1'\n                              );\n                              \n                              if (selectedIndex && !isNaN(Number(selectedIndex))) {\n                                const index = Number(selectedIndex) - 1;\n                                if (index >= 0 && index < elements.length) {\n                                  setTriggerText(elements[index].text);\n                                  setLinkType(elements[index].type);\n                                }\n                              }\n                            } else {\n                              alert('No clickable elements found on this page. Try generating content with buttons or links first.');\n                            }\n                          } catch (error) {\n                            console.error('Error extracting elements:', error);\n                            alert('Failed to extract clickable elements. Please try again.');\n                          }\n                        }}\n                      >\n                        Auto-Extract\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Click Auto-Extract to find all clickable elements from the selected page\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"linkType\">Element Type</Label>\n                    <Select value={linkType} onValueChange={(value: \"button\" | \"link\") => setLinkType(value)}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"button\">Button</SelectItem>\n                        <SelectItem value=\"link\">Link</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"toPage\">To Page (destination)</Label>\n                    <Select value={toPageId} onValueChange={setToPageId}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select destination page\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {pages?.map((page) => (\n                          <SelectItem key={page.id} value={page.id}>\n                            {page.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <Button onClick={createPageLink} className=\"w-full\">\n                    <Link2 className=\"mr-2 h-4 w-4\" />\n                    Create Navigation Link\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Component to Page\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Add Component to Page</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"component\">Component</Label>\n                    <Select value={selectedComponentId} onValueChange={setSelectedComponentId}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a component\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {components?.map((component) => (\n                          <SelectItem key={component.id} value={component.id}>\n                            {component.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"targetPage\">Target Page</Label>\n                    <Select value={targetPageId} onValueChange={setTargetPageId}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select target page\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {pages?.map((page) => (\n                          <SelectItem key={page.id} value={page.id}>\n                            {page.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <Button onClick={addComponentToTargetPage} className=\"w-full\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Add Component\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Button variant=\"outline\" size=\"sm\">\n              <ZoomOut className=\"mr-2 h-4 w-4\" />\n              Zoom Out\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <ZoomIn className=\"mr-2 h-4 w-4\" />\n              Zoom In\n            </Button>\n            <Button\n              onClick={async () => {\n                try {\n                  const response = await fetch('/api/init-dummy-pages', { method: 'POST' });\n                  const result = await response.json();\n                  if (response.ok) {\n                    // Refresh pages data\n                    window.location.reload();\n                  }\n                } catch (error) {\n                  console.error('Error creating dummy pages:', error);\n                }\n              }}\n              variant=\"outline\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Test Pages\n            </Button>\n            <Button>\n              <Save className=\"mr-2 h-4 w-4\" />\n              Save Flow\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <div className=\"flex-1 flex\">\n        {/* Sidebar */}\n        <div className=\"w-80 bg-white border-r border-slate-200 p-4 overflow-y-auto\">\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Page Navigation Links</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {links && links.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {links.map((link) => {\n                    const fromPage = pages?.find(p => p.id === link.fromPageId);\n                    const toPage = pages?.find(p => p.id === link.toPageId);\n                    return (\n                      <div key={link.id} className=\"p-3 border border-blue-200 rounded-lg bg-blue-50\">\n                        <div className=\"flex items-center space-x-2 text-sm\">\n                          <span className=\"font-medium text-blue-900\">{fromPage?.name}</span>\n                          <span className=\"text-blue-600\">→</span>\n                          <span className=\"font-medium text-blue-900\">{toPage?.name}</span>\n                        </div>\n                        <div className=\"text-xs text-blue-700 mt-1\">\n                          Trigger: \"{link.triggerText}\" ({link.linkType})\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"text-sm text-slate-500 text-center py-4\">\n                  No page links created yet. Create navigation flows between your pages.\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Available Components</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {components && components.length > 0 ? (\n                <div className=\"space-y-2\">\n                  {components.map((component) => (\n                    <div key={component.id} className=\"p-2 border border-slate-200 rounded-lg\">\n                      <div className=\"font-medium text-sm\">{component.name}</div>\n                      <div className=\"text-xs text-slate-500\">\n                        From: {pages?.find(p => p.id === component.sourcePageId)?.name}\n                      </div>\n                      {component.description && (\n                        <div className=\"text-xs text-slate-600 mt-1\">\n                          {component.description}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-sm text-slate-500 text-center py-4\">\n                  No components created yet. Extract components from your pages to reuse them.\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Flow Canvas */}\n        <div className=\"flex-1 bg-slate-100\">\n          <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            nodeTypes={nodeTypes}\n            fitView\n            className=\"bg-slate-100\"\n          >\n            <Background color=\"#64748b\" gap={20} />\n            <Controls />\n            <MiniMap />\n          </ReactFlow>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":23330},"client/src/pages/media-library.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useMedia, useUploadMedia, useDeleteMedia } from \"@/hooks/use-media\";\nimport UploadZone from \"@/components/media/upload-zone\";\nimport MediaGrid from \"@/components/media/media-grid\";\nimport { Search, Upload } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function MediaLibrary() {\n  const [search, setSearch] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const { data: media, isLoading } = useMedia(search);\n  const { mutate: uploadMedia, isPending: isUploading } = useUploadMedia();\n  const { mutate: deleteMedia } = useDeleteMedia();\n  const { toast } = useToast();\n\n  const filteredMedia = media?.filter(item => {\n    if (typeFilter === \"all\") return true;\n    if (typeFilter === \"images\") return item.mimeType.startsWith('image/');\n    if (typeFilter === \"documents\") return item.mimeType === 'application/pdf';\n    return false;\n  });\n\n  const handleFileUpload = (files: FileList) => {\n    uploadMedia(files, {\n      onSuccess: (uploadedFiles) => {\n        toast({\n          title: \"Upload successful\",\n          description: `${uploadedFiles.length} file(s) uploaded successfully.`,\n        });\n      },\n      onError: (error) => {\n        toast({\n          title: \"Upload failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      }\n    });\n  };\n\n  const handleDeleteMedia = (id: string, filename: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${filename}\"?`)) {\n      deleteMedia(id, {\n        onSuccess: () => {\n          toast({\n            title: \"File deleted\",\n            description: `\"${filename}\" has been deleted successfully.`,\n          });\n        },\n        onError: () => {\n          toast({\n            title: \"Error\",\n            description: \"Failed to delete file.\",\n            variant: \"destructive\",\n          });\n        }\n      });\n    }\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-slate-900 font-inter\">Media Library</h1>\n            <p className=\"text-slate-500 mt-1\">Manage images, icons, and other assets</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <Input\n                placeholder=\"Search media...\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                className=\"pl-10 pr-4 py-2\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400\" />\n            </div>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"images\">Images</SelectItem>\n                <SelectItem value=\"documents\">Documents</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex-1 p-6 overflow-y-auto\">\n        {/* Upload Area */}\n        <UploadZone onFileUpload={handleFileUpload} isUploading={isUploading} />\n\n        {/* Media Grid */}\n        {isLoading ? (\n          <div className=\"text-center py-8\">Loading media...</div>\n        ) : !filteredMedia || filteredMedia.length === 0 ? (\n          <Card className=\"mt-6\">\n            <CardContent className=\"p-8 text-center\">\n              <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No media files found</h3>\n              <p className=\"text-slate-500\">\n                {search || typeFilter !== \"all\" \n                  ? \"No files match your search criteria.\" \n                  : \"Upload some files to get started.\"}\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <MediaGrid \n            media={filteredMedia} \n            onDeleteMedia={handleDeleteMedia}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","size_bytes":4530},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/page-editor.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { usePages } from \"@/hooks/use-pages\";\nimport WYSIWYGEditor from \"@/components/editor/wysiwyg-editor\";\nimport { Undo, Redo } from \"lucide-react\";\n\nexport default function PageEditor() {\n  const { data: pages } = usePages();\n  const [selectedPageId, setSelectedPageId] = useState<string>(\"\");\n  const [viewMode, setViewMode] = useState<'desktop' | 'tablet' | 'mobile'>('desktop');\n\n  const selectedPage = pages?.find(p => p.id === selectedPageId);\n\n  return (\n    <div className=\"flex-1 flex\">\n      {/* Editor Sidebar */}\n      <div className=\"w-80 bg-white border-r border-slate-200 flex flex-col\">\n        <div className=\"p-4 border-b border-slate-200\">\n          <h2 className=\"font-semibold text-slate-900\">Page Editor</h2>\n          <p className=\"text-sm text-slate-500 mt-1\">Modify AI-generated content</p>\n        </div>\n        \n        {/* Page Selection */}\n        <div className=\"p-4 border-b border-slate-200\">\n          <label className=\"block text-sm font-medium text-slate-700 mb-2\">Current Page</label>\n          <Select value={selectedPageId} onValueChange={setSelectedPageId}>\n            <SelectTrigger className=\"w-full\">\n              <SelectValue placeholder=\"Select a page to edit\" />\n            </SelectTrigger>\n            <SelectContent>\n              {pages?.map((page) => (\n                <SelectItem key={page.id} value={page.id}>\n                  {page.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <WYSIWYGEditor />\n        \n        <div className=\"p-4 border-t border-slate-200\">\n          <Button className=\"w-full\">\n            Save Changes\n          </Button>\n        </div>\n      </div>\n      \n      {/* Editor Canvas */}\n      <div className=\"flex-1 flex flex-col\">\n        <div className=\"bg-slate-100 border-b border-slate-200 px-4 py-2 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant={viewMode === 'desktop' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('desktop')}\n            >\n              Desktop\n            </Button>\n            <Button \n              variant={viewMode === 'tablet' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('tablet')}\n            >\n              Tablet\n            </Button>\n            <Button \n              variant={viewMode === 'mobile' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('mobile')}\n            >\n              Mobile\n            </Button>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"sm\" title=\"Undo\">\n              <Undo className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" title=\"Redo\">\n              <Redo className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        {/* Canvas Area */}\n        <div className=\"flex-1 bg-slate-200 p-8 overflow-auto\">\n          {selectedPage ? (\n            <div \n              className={`bg-white shadow-xl rounded-lg mx-auto min-h-96 ${\n                viewMode === 'desktop' ? 'max-w-4xl' : \n                viewMode === 'tablet' ? 'max-w-2xl' :\n                'max-w-sm'\n              }`}\n            >\n              <div \n                className=\"p-8\"\n                dangerouslySetInnerHTML={{ __html: selectedPage.html }}\n              />\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No page selected</h3>\n                <p className=\"text-slate-500\">Select a page from the sidebar to start editing</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Live Preview Panel */}\n      <div className=\"w-80 bg-white border-l border-slate-200\">\n        <div className=\"p-4 border-b border-slate-200\">\n          <h3 className=\"font-semibold text-slate-900\">Live Preview</h3>\n          <p className=\"text-sm text-slate-500 mt-1\">Real-time preview</p>\n        </div>\n        <div className=\"p-4\">\n          <div className=\"bg-slate-100 rounded-lg p-4 aspect-video\">\n            {selectedPage ? (\n              <div className=\"bg-white rounded shadow p-3 text-xs h-full overflow-hidden\">\n                <iframe\n                  srcDoc={`\n                    <style>${selectedPage.css}</style>\n                    ${selectedPage.html}\n                    <script>${selectedPage.js}</script>\n                  `}\n                  className=\"w-full h-full border-0\"\n                  title=\"Live Preview\"\n                />\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-center h-full text-slate-400\">\n                Select a page to preview\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5279},"client/src/components/editor/wysiwyg-editor.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Type, Image, MousePointer, FileText } from \"lucide-react\";\n\nexport default function WYSIWYGEditor() {\n  return (\n    <div className=\"flex-1 p-4 space-y-4 overflow-y-auto\">\n      <div>\n        <h3 className=\"font-medium text-slate-900 mb-3\">Components</h3>\n        <div className=\"grid grid-cols-2 gap-2\">\n          <Button\n            variant=\"outline\"\n            className=\"p-3 h-auto flex-col\"\n          >\n            <Type className=\"h-5 w-5 text-slate-500 mb-1\" />\n            <span className=\"text-xs text-slate-600\">Text</span>\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"p-3 h-auto flex-col\"\n          >\n            <Image className=\"h-5 w-5 text-slate-500 mb-1\" />\n            <span className=\"text-xs text-slate-600\">Image</span>\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"p-3 h-auto flex-col\"\n          >\n            <MousePointer className=\"h-5 w-5 text-slate-500 mb-1\" />\n            <span className=\"text-xs text-slate-600\">Button</span>\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"p-3 h-auto flex-col\"\n          >\n            <FileText className=\"h-5 w-5 text-slate-500 mb-1\" />\n            <span className=\"text-xs text-slate-600\">Form</span>\n          </Button>\n        </div>\n      </div>\n      \n      {/* Style Panel */}\n      <div>\n        <h3 className=\"font-medium text-slate-900 mb-3\">Selected Element</h3>\n        <div className=\"space-y-3\">\n          <div>\n            <Label htmlFor=\"fontSize\" className=\"text-xs font-medium text-slate-600\">Font Size</Label>\n            <Select defaultValue=\"16\">\n              <SelectTrigger className=\"w-full mt-1\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"12\">12px</SelectItem>\n                <SelectItem value=\"14\">14px</SelectItem>\n                <SelectItem value=\"16\">16px</SelectItem>\n                <SelectItem value=\"18\">18px</SelectItem>\n                <SelectItem value=\"24\">24px</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <Label htmlFor=\"textColor\" className=\"text-xs font-medium text-slate-600\">Text Color</Label>\n            <Input \n              id=\"textColor\"\n              type=\"color\" \n              defaultValue=\"#334155\" \n              className=\"w-full h-8 mt-1\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"backgroundColor\" className=\"text-xs font-medium text-slate-600\">Background</Label>\n            <Input \n              id=\"backgroundColor\"\n              type=\"color\" \n              defaultValue=\"#ffffff\" \n              className=\"w-full h-8 mt-1\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"padding\" className=\"text-xs font-medium text-slate-600\">Padding</Label>\n            <Input \n              id=\"padding\"\n              type=\"range\" \n              min=\"0\" \n              max=\"50\" \n              defaultValue=\"16\" \n              className=\"w-full mt-1\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3443},"client/src/components/flow/flow-node.tsx":{"content":"import { Handle, Position } from \"reactflow\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MoreVertical, Home, BarChart3, FileText } from \"lucide-react\";\nimport type { Page } from \"@shared/schema\";\n\ninterface FlowNodeProps {\n  data: {\n    page: Page;\n  };\n}\n\nexport default function FlowNode({ data }: FlowNodeProps) {\n  const { page } = data;\n\n  const getStateColor = (state: string) => {\n    switch (state) {\n      case \"Live\":\n        return \"bg-green-100 text-green-800\";\n      case \"Draft\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"Expired\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getIcon = (pageType: string) => {\n    switch (pageType) {\n      case \"landing\":\n        return <Home className=\"h-4 w-4 text-green-600\" />;\n      case \"dashboard\":\n        return <BarChart3 className=\"h-4 w-4 text-yellow-600\" />;\n      default:\n        return <FileText className=\"h-4 w-4 text-slate-500\" />;\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg border-2 border-slate-200 p-4 w-64 hover:border-primary transition-colors\">\n      <Handle type=\"target\" position={Position.Left} className=\"w-3 h-3 bg-slate-300\" />\n      <Handle type=\"source\" position={Position.Right} className=\"w-3 h-3 bg-primary\" />\n      \n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-slate-100 rounded-lg flex items-center justify-center mr-3\">\n            {getIcon(page.pageType)}\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-slate-900 text-sm\">{page.name}</h3>\n            <Badge className={`${getStateColor(page.state)} text-xs mt-1`}>\n              {page.state}\n            </Badge>\n          </div>\n        </div>\n        <Button variant=\"ghost\" size=\"sm\">\n          <MoreVertical className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      \n      {/* Thumbnail preview */}\n      <div className=\"bg-slate-100 rounded-lg p-3 mb-3\">\n        {page.thumbnail ? (\n          <img \n            src={page.thumbnail} \n            alt={`${page.name} preview`}\n            className=\"w-full h-16 object-cover rounded\"\n          />\n        ) : (\n          <div className=\"bg-slate-200 rounded h-16 mb-2 flex items-center justify-center\">\n            <FileText className=\"h-6 w-6 text-slate-400\" />\n          </div>\n        )}\n        <div className=\"space-y-1 mt-2\">\n          <div className=\"bg-slate-300 rounded h-2 w-3/4\"></div>\n          <div className=\"bg-slate-300 rounded h-2 w-1/2\"></div>\n        </div>\n      </div>\n      \n      <div className=\"flex justify-between text-xs text-slate-500\">\n        <span>Created {new Date(page.createdAt).toLocaleDateString()}</span>\n        <span>0 connections</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2919},"client/src/components/layout/main-layout.tsx":{"content":"import Sidebar from \"./sidebar\";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function MainLayout({ children }: MainLayoutProps) {\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":356},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Workflow, Edit, Image, Bot, Download, User, CheckCircle } from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Home },\n  { name: \"Page Flow\", href: \"/flow-editor\", icon: Workflow },\n  { name: \"Page Editor\", href: \"/page-editor\", icon: Edit },\n  { name: \"Media Library\", href: \"/media-library\", icon: Image },\n  { name: \"AI Generator\", href: \"/ai-generator\", icon: Bot },\n  { name: \"Approval Dashboard\", href: \"/approval-dashboard\", icon: CheckCircle },\n  { name: \"Export Site\", href: \"/export\", icon: Download },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white shadow-sm border-r border-slate-200 flex flex-col\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-slate-200\">\n        <h1 className=\"text-xl font-bold text-slate-900 font-inter\">AI Site Builder</h1>\n        <p className=\"text-sm text-slate-500 mt-1\">v2.5</p>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <div className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors cursor-pointer ${\n                isActive \n                  ? 'text-primary bg-primary/10' \n                  : 'text-slate-600 hover:bg-slate-100'\n              }`}>\n                <Icon className=\"mr-3 h-4 w-4\" />\n                {item.name}\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n      \n      {/* Footer */}\n      <div className=\"p-4 border-t border-slate-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <User className=\"h-4 w-4 text-white\" />\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-slate-900\">Admin User</p>\n            <p className=\"text-xs text-slate-500\">Admin</p>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2245},"client/src/components/media/media-grid.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Eye, Plus, Trash2, FileText } from \"lucide-react\";\nimport type { Media } from \"@shared/schema\";\n\ninterface MediaGridProps {\n  media: Media[];\n  onDeleteMedia: (id: string, filename: string) => void;\n}\n\nexport default function MediaGrid({ media, onDeleteMedia }: MediaGridProps) {\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) {\n      return null; // Show actual image\n    }\n    return <FileText className=\"h-8 w-8 text-slate-400\" />;\n  };\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mt-6\">\n      {media.map((file) => (\n        <div\n          key={file.id}\n          className=\"group relative bg-white rounded-lg border border-slate-200 p-3 hover:shadow-md transition-shadow cursor-pointer\"\n        >\n          <div className=\"aspect-square bg-slate-100 rounded-lg mb-3 overflow-hidden flex items-center justify-center\">\n            {file.mimeType.startsWith('image/') ? (\n              <img\n                src={`/api/media/file/${file.filename}`}\n                alt={file.originalName}\n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              getFileIcon(file.mimeType)\n            )}\n          </div>\n          <p className=\"text-sm font-medium text-slate-900 truncate mb-1\">\n            {file.originalName}\n          </p>\n          <p className=\"text-xs text-slate-500\">{formatFileSize(file.size)}</p>\n\n          {/* Hover Actions */}\n          <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center space-x-2\">\n            <Button size=\"sm\" variant=\"secondary\" className=\"w-8 h-8 p-0\">\n              <Eye className=\"h-4 w-4\" />\n            </Button>\n            <Button size=\"sm\" variant=\"secondary\" className=\"w-8 h-8 p-0\">\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              className=\"w-8 h-8 p-0\"\n              onClick={() => onDeleteMedia(file.id, file.originalName)}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2588},"client/src/components/media/upload-zone.tsx":{"content":"import { useCallback, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { CloudUpload } from \"lucide-react\";\n\ninterface UploadZoneProps {\n  onFileUpload: (files: FileList) => void;\n  isUploading?: boolean;\n}\n\nexport default function UploadZone({ onFileUpload, isUploading }: UploadZoneProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      onFileUpload(e.dataTransfer.files);\n    }\n  }, [onFileUpload]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleFileInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      onFileUpload(e.target.files);\n    }\n  }, [onFileUpload]);\n\n  return (\n    <div \n      className={`bg-slate-50 border-2 border-dashed rounded-xl p-8 text-center mb-6 transition-colors ${\n        isDragOver ? 'border-primary bg-primary/5' : 'border-slate-300'\n      } ${isUploading ? 'opacity-50 pointer-events-none' : ''}`}\n      onDrop={handleDrop}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n    >\n      <CloudUpload className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n      <h3 className=\"text-lg font-medium text-slate-900 mb-2\">\n        {isUploading ? 'Uploading files...' : 'Drop files here to upload'}\n      </h3>\n      <p className=\"text-slate-500 mb-4\">or click to browse your computer</p>\n      <input\n        type=\"file\"\n        multiple\n        onChange={handleFileInput}\n        className=\"hidden\"\n        id=\"file-upload\"\n        accept=\"image/*,application/pdf\"\n        disabled={isUploading}\n      />\n      <label htmlFor=\"file-upload\">\n        <Button asChild className=\"cursor-pointer\" disabled={isUploading}>\n          <span>Browse Files</span>\n        </Button>\n      </label>\n      <p className=\"text-sm text-slate-400 mt-3\">\n        Supports: JPG, PNG, GIF, SVG, PDF (Max 10MB)\n      </p>\n    </div>\n  );\n}\n","size_bytes":2281},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/services/component-extractor.ts":{"content":"// Simple HTML component extraction service\n// In a production environment, you'd use a proper DOM parser like cheerio or jsdom\n\nexport interface ExtractedComponent {\n  html: string;\n  css: string;\n  js?: string;\n}\n\nexport function extractComponentFromHTML(\n  html: string, \n  css: string, \n  js: string, \n  selector: string\n): ExtractedComponent {\n  // This is a simplified extraction - in production you'd use a DOM parser\n  \n  // For now, we'll create a basic template based on the selector\n  const componentName = selector.replace(/[.#]/g, '').replace(/\\s+/g, '-');\n  \n  const extractedHtml = `<div class=\"${componentName}\">\n  <!-- Component extracted using selector: ${selector} -->\n  <div class=\"component-content\">\n    <!-- This would contain the actual extracted HTML -->\n    <p>Component content from selector: ${selector}</p>\n  </div>\n</div>`;\n\n  const extractedCss = `/* Component styles extracted from ${selector} */\n.${componentName} {\n  /* Extracted styles would go here */\n  padding: 1rem;\n  border: 1px solid #e2e8f0;\n  border-radius: 0.5rem;\n  background-color: #f8fafc;\n}\n\n.${componentName} .component-content {\n  /* Content styles */\n}`;\n\n  const extractedJs = `// Component JavaScript for ${selector}\n// Extracted JavaScript functionality would go here\nconsole.log('Component ${componentName} loaded');`;\n\n  return {\n    html: extractedHtml,\n    css: extractedCss,\n    js: extractedJs,\n  };\n}\n\nexport function injectComponentIntoPage(\n  pageHtml: string,\n  componentHtml: string,\n  targetSelector?: string\n): string {\n  // Simple injection - in production you'd use a DOM parser\n  const injection = `\n<!-- Injected Component -->\n${componentHtml}\n<!-- End Injected Component -->\n`;\n\n  if (targetSelector) {\n    // Try to inject at specific location\n    return pageHtml + injection;\n  } else {\n    // Inject at the end of body\n    const bodyEndIndex = pageHtml.lastIndexOf('</body>');\n    if (bodyEndIndex !== -1) {\n      return pageHtml.slice(0, bodyEndIndex) + injection + pageHtml.slice(bodyEndIndex);\n    } else {\n      // If no body tag, append to end\n      return pageHtml + injection;\n    }\n  }\n}","size_bytes":2121},"server/services/element-extractor.ts":{"content":"import { load } from 'cheerio';\n\nexport interface ClickableElement {\n  text: string;\n  type: 'button' | 'link';\n  selector: string;\n  tagName: string;\n}\n\nexport function extractClickableElements(html: string): ClickableElement[] {\n  const $ = load(html);\n  const clickableElements: ClickableElement[] = [];\n\n  // Extract buttons\n  $('button').each((_, element) => {\n    const $el = $(element);\n    const text = $el.text().trim();\n    if (text && text.length > 0 && text.length < 50) {\n      clickableElements.push({\n        text,\n        type: 'button',\n        selector: getUniqueSelector($, element),\n        tagName: 'button'\n      });\n    }\n  });\n\n  // Extract links (a tags)\n  $('a').each((_, element) => {\n    const $el = $(element);\n    const text = $el.text().trim();\n    if (text && text.length > 0 && text.length < 50) {\n      clickableElements.push({\n        text,\n        type: 'link',\n        selector: getUniqueSelector($, element),\n        tagName: 'a'\n      });\n    }\n  });\n\n  // Extract elements that look like navigation items\n  $('nav a, .nav a, .navigation a, .menu a, .sidebar a').each((_, element) => {\n    const $el = $(element);\n    const text = $el.text().trim();\n    if (text && text.length > 0 && text.length < 50) {\n      clickableElements.push({\n        text,\n        type: 'link',\n        selector: getUniqueSelector($, element),\n        tagName: $el.prop('tagName')?.toLowerCase() || 'a'\n      });\n    }\n  });\n\n  // Extract clickable divs and spans that might be styled as buttons\n  $('div[onclick], span[onclick], div.button, span.button, .btn, .click').each((_, element) => {\n    const $el = $(element);\n    const text = $el.text().trim();\n    if (text && text.length > 0 && text.length < 50) {\n      clickableElements.push({\n        text,\n        type: 'button',\n        selector: getUniqueSelector($, element),\n        tagName: $el.prop('tagName')?.toLowerCase() || 'div'\n      });\n    }\n  });\n\n  // Extract elements with common clickable classes and attributes\n  $('[role=\"button\"], [role=\"link\"], .clickable, .interactive, [data-action], [data-click]').each((_, element) => {\n    const $el = $(element);\n    const text = $el.text().trim();\n    if (text && text.length > 0 && text.length < 50) {\n      clickableElements.push({\n        text,\n        type: 'button',\n        selector: getUniqueSelector($, element),\n        tagName: $el.prop('tagName')?.toLowerCase() || 'div'\n      });\n    }\n  });\n\n  // Extract input elements that can be clicked (submit, button)\n  $('input[type=\"submit\"], input[type=\"button\"]').each((_, element) => {\n    const $el = $(element);\n    const text = $el.attr('value') || $el.text().trim();\n    if (text && text.length > 0 && text.length < 50) {\n      clickableElements.push({\n        text,\n        type: 'button',\n        selector: getUniqueSelector($, element),\n        tagName: 'input'\n      });\n    }\n  });\n\n  // Extract elements with common navigation/action text patterns\n  $('*').each((_, element) => {\n    const $el = $(element);\n    const text = $el.text().trim();\n    const directText = $el.clone().children().remove().end().text().trim();\n    \n    // Check if element has direct text and seems clickable based on common patterns\n    const clickablePatterns = /^(home|about|contact|services|products|blog|news|login|signup|register|submit|send|buy|shop|cart|menu|search|more|learn|get|start|try|download|watch|read|view|explore|discover|join|follow|share|like|comment|reply|edit|delete|save|cancel|continue|next|previous|back|settings|profile|logout|sign out|sign in)$/i;\n    \n    if (directText && directText.length > 0 && directText.length < 30 && clickablePatterns.test(directText)) {\n      // Check if it's not already captured and has some clickable styling indicators\n      const hasClickableStyle = $el.css('cursor') === 'pointer' || \n                                $el.is('button, a, input[type=\"submit\"], input[type=\"button\"]') ||\n                                $el.hasClass('btn') || $el.hasClass('button') || $el.hasClass('link') ||\n                                $el.attr('onclick') || $el.attr('role') === 'button' || $el.attr('role') === 'link';\n      \n      if (hasClickableStyle && !clickableElements.some(el => el.text === directText)) {\n        clickableElements.push({\n          text: directText,\n          type: $el.is('a') ? 'link' : 'button',\n          selector: getUniqueSelector($, element),\n          tagName: $el.prop('tagName')?.toLowerCase() || 'div'\n        });\n      }\n    }\n  });\n\n  // Remove duplicates based on text content\n  const unique = new Map<string, ClickableElement>();\n  clickableElements.forEach(element => {\n    if (!unique.has(element.text)) {\n      unique.set(element.text, element);\n    }\n  });\n\n  return Array.from(unique.values());\n}\n\nfunction getUniqueSelector($: any, element: any): string {\n  const $el = $(element);\n  \n  // Try ID first\n  const id = $el.attr('id');\n  if (id) {\n    return `#${id}`;\n  }\n\n  // Try class\n  const className = $el.attr('class');\n  if (className) {\n    const classes = className.split(' ').filter((c: string) => c.length > 0);\n    if (classes.length > 0) {\n      return `.${classes[0]}`;\n    }\n  }\n\n  // Fallback to tag name with text content\n  const text = $el.text().trim();\n  const tagName = $el.prop('tagName')?.toLowerCase() || 'element';\n  return `${tagName}:contains(\"${text.substring(0, 20)}\")`;\n}","size_bytes":5365},"server/services/page-navigation.ts":{"content":"import type { Link } from \"@shared/schema\";\n\nexport function generateNavigationScript(pageLinks: Link[]): string {\n  if (pageLinks.length === 0) return '';\n\n  return `\n// Page navigation functionality - Auto-generated\ndocument.addEventListener('DOMContentLoaded', function() {\n  console.log('Setting up page navigation for ${pageLinks.length} links');\n  \n  ${pageLinks.map(link => `\n    // Navigation for: \"${link.triggerText}\" -> ${link.toPageId}\n    (function() {\n      const triggerText = '${link.triggerText}';\n      const linkType = '${link.linkType}';\n      const targetPageId = '${link.toPageId}';\n      \n      // Find specific elements matching the trigger text more precisely\n      const elements = [];\n      \n      // First try to find exact matches for interactive elements\n      const interactiveSelectors = [\n        'button', 'a', 'input[type=\"submit\"]', 'input[type=\"button\"]',\n        '[role=\"button\"]', '[role=\"link\"]', '.btn', '.button', '.link',\n        '[onclick]', '[data-action]', '[data-click]'\n      ];\n      \n      for (const selector of interactiveSelectors) {\n        const matches = Array.from(document.querySelectorAll(selector)).filter(el => {\n          const text = el.textContent && el.textContent.trim();\n          return text && text.toLowerCase() === triggerText.toLowerCase();\n        });\n        elements.push(...matches);\n      }\n      \n      // If no exact matches found, look for elements that contain the text but prioritize smaller elements\n      if (elements.length === 0) {\n        const allMatches = Array.from(document.querySelectorAll('*')).filter(el => {\n          const text = el.textContent && el.textContent.trim();\n          return text && text.toLowerCase().includes(triggerText.toLowerCase());\n        });\n        \n        // Sort by text length to prioritize more specific matches\n        allMatches.sort((a, b) => {\n          const aText = a.textContent?.trim() || '';\n          const bText = b.textContent?.trim() || '';\n          return aText.length - bText.length;\n        });\n        \n        // Take only the most specific match (shortest text that contains our trigger)\n        if (allMatches.length > 0) {\n          elements.push(allMatches[0]);\n        }\n      }\n      \n      console.log('Found ' + elements.length + ' elements for trigger \"' + triggerText + '\"');\n      \n      elements.forEach(function(element) {\n        // Style the clickable element\n        element.style.cursor = 'pointer';\n        element.style.transition = 'all 0.2s ease';\n        \n        if (linkType === 'button') {\n          element.style.backgroundColor = '#3b82f6';\n          element.style.color = 'white';\n          element.style.padding = '8px 16px';\n          element.style.borderRadius = '6px';\n          element.style.border = 'none';\n        } else if (linkType === 'link') {\n          element.style.color = '#3b82f6';\n          element.style.textDecoration = 'underline';\n        }\n        \n        // Add hover effects\n        element.addEventListener('mouseenter', function() {\n          if (linkType === 'button') {\n            element.style.backgroundColor = '#2563eb';\n          } else {\n            element.style.color = '#1d4ed8';\n          }\n        });\n        \n        element.addEventListener('mouseleave', function() {\n          if (linkType === 'button') {\n            element.style.backgroundColor = '#3b82f6';\n          } else {\n            element.style.color = '#3b82f6';\n          }\n        });\n        \n        // Add click handler for navigation\n        element.addEventListener('click', function(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          console.log('Navigating from \"' + triggerText + '\" to page: ' + targetPageId);\n          window.location.href = '/preview/' + targetPageId;\n        });\n        \n        console.log('Setup navigation for element:', element);\n      });\n    })();\n  `).join('\\n')}\n});\n`;\n}","size_bytes":3914},"client/src/hooks/use-components.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Component, InsertComponent, PageComponent, InsertPageComponent } from \"@shared/schema\";\n\n// Component hooks\nexport const useComponents = () => {\n  return useQuery({\n    queryKey: ['/api/components'],\n    queryFn: () => apiRequest(\"GET\", \"/api/components\").then(res => res.json() as Promise<Component[]>),\n  });\n};\n\nexport const usePageComponents = (pageId: string) => {\n  return useQuery({\n    queryKey: ['/api/components/page', pageId],\n    queryFn: () => apiRequest(\"GET\", `/api/components/page/${pageId}`).then(res => res.json() as Promise<Component[]>),\n  });\n};\n\nexport const useCreateComponent = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (componentData: InsertComponent) => \n      apiRequest(\"POST\", \"/api/components\", componentData).then(res => res.json() as Promise<Component>),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/components'] });\n    },\n  });\n};\n\nexport const useDeleteComponent = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (id: string) => \n      apiRequest(\"DELETE\", `/api/components/${id}`).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/components'] });\n    },\n  });\n};\n\n// Page component hooks\nexport const usePageComponentsList = (pageId: string) => {\n  return useQuery({\n    queryKey: ['/api/pages', pageId, 'components'],\n    queryFn: () => apiRequest(\"GET\", `/api/pages/${pageId}/components`).then(res => res.json() as Promise<PageComponent[]>),\n  });\n};\n\nexport const useAddComponentToPage = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ pageId, ...componentData }: InsertPageComponent & { pageId: string }) => \n      apiRequest(\"POST\", `/api/pages/${pageId}/components`, componentData).then(res => res.json() as Promise<PageComponent>),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pages', variables.pageId, 'components'] });\n    },\n  });\n};\n\nexport const useRemoveComponentFromPage = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (id: string) => \n      apiRequest(\"DELETE\", `/api/pages/components/${id}`).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pages'] });\n    },\n  });\n};","size_bytes":2526},"client/src/hooks/use-links.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Link, InsertLink } from \"@shared/schema\";\n\n// Link hooks for page navigation flows\nexport const useLinks = () => {\n  return useQuery({\n    queryKey: ['/api/links'],\n    queryFn: () => apiRequest(\"GET\", \"/api/links\").then(res => res.json() as Promise<Link[]>),\n  });\n};\n\nexport const usePageLinks = (pageId: string) => {\n  return useQuery({\n    queryKey: ['/api/links/page', pageId],\n    queryFn: () => apiRequest(\"GET\", `/api/links/page/${pageId}`).then(res => res.json() as Promise<Link[]>),\n    enabled: !!pageId,\n  });\n};\n\nexport const useCreateLink = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (linkData: InsertLink) => \n      apiRequest(\"POST\", \"/api/links\", linkData).then(res => res.json() as Promise<Link>),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/links'] });\n    },\n  });\n};\n\nexport const useDeleteLink = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (id: string) => \n      apiRequest(\"DELETE\", `/api/links/${id}`).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/links'] });\n    },\n  });\n};","size_bytes":1324},"client/src/pages/approval-dashboard.tsx":{"content":"import React from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { CheckCircle, XCircle, Clock, Eye } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface Page {\n  id: string;\n  name: string;\n  state: string;\n  createdAt: string;\n  submittedAt?: string;\n  pageType: string;\n  thumbnail?: string;\n}\n\nexport default function ApprovalDashboard() {\n  const queryClient = useQueryClient();\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n  const [selectedPageForRejection, setSelectedPageForRejection] = useState<string | null>(null);\n\n  // Fetch pages pending approval\n  const { data: pendingPages, isLoading: isLoadingPending } = useQuery<Page[]>({\n    queryKey: ['/api/pages/pending-approval'],\n  });\n\n  // Fetch all pages to show stats\n  const { data: allPages } = useQuery<Page[]>({\n    queryKey: ['/api/pages'],\n  });\n\n  // Approve page mutation\n  const approveMutation = useMutation({\n    mutationFn: async (pageId: string) => {\n      const response = await fetch(`/api/pages/${pageId}/approve`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ approverId: 'demo-approver' }) // In real app, get from auth\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pages'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/pages/pending-approval'] });\n    }\n  });\n\n  // Reject page mutation\n  const rejectMutation = useMutation({\n    mutationFn: async ({ pageId, reason }: { pageId: string; reason: string }) => {\n      const response = await fetch(`/api/pages/${pageId}/reject`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          approverId: 'demo-approver', // In real app, get from auth\n          reason \n        })\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pages'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/pages/pending-approval'] });\n      setRejectionReason(\"\");\n      setSelectedPageForRejection(null);\n    }\n  });\n\n  // Publish approved page mutation\n  const publishMutation = useMutation({\n    mutationFn: async (pageId: string) => {\n      const response = await fetch(`/api/pages/${pageId}/state`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ state: 'Live' })\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pages'] });\n    }\n  });\n\n  const handleApprove = (pageId: string) => {\n    approveMutation.mutate(pageId);\n  };\n\n  const handleReject = (pageId: string, reason: string) => {\n    if (!reason.trim()) {\n      alert(\"Please provide a rejection reason\");\n      return;\n    }\n    rejectMutation.mutate({ pageId, reason });\n  };\n\n  const handlePublish = (pageId: string) => {\n    publishMutation.mutate(pageId);\n  };\n\n  const getStatusBadge = (state: string) => {\n    switch (state) {\n      case 'Pending_Approval':\n        return <Badge variant=\"secondary\"><Clock className=\"w-3 h-3 mr-1\" />Pending</Badge>;\n      case 'Approved':\n        return <Badge variant=\"default\"><CheckCircle className=\"w-3 h-3 mr-1\" />Approved</Badge>;\n      case 'Rejected':\n        return <Badge variant=\"destructive\"><XCircle className=\"w-3 h-3 mr-1\" />Rejected</Badge>;\n      case 'Live':\n        return <Badge variant=\"default\" className=\"bg-green-600\"><CheckCircle className=\"w-3 h-3 mr-1\" />Live</Badge>;\n      default:\n        return <Badge variant=\"outline\">{state}</Badge>;\n    }\n  };\n\n  const stats = {\n    pending: allPages?.filter(p => p.state === 'Pending_Approval').length || 0,\n    approved: allPages?.filter(p => p.state === 'Approved').length || 0,\n    rejected: allPages?.filter(p => p.state === 'Rejected').length || 0,\n    live: allPages?.filter(p => p.state === 'Live').length || 0,\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Approval Dashboard</h1>\n          <p className=\"text-muted-foreground\">Review and approve pages awaiting publication</p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Approval</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{stats.pending}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.approved}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Live Pages</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.live}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{stats.rejected}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pending Approval Pages */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Pages Awaiting Approval</CardTitle>\n          <CardDescription>\n            Review these pages and approve or reject them for publication\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoadingPending ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading pending pages...</div>\n          ) : !pendingPages || pendingPages.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No pages pending approval\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {pendingPages.map((page) => (\n                <div key={page.id} className=\"border rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <h3 className=\"font-semibold text-lg\">{page.name}</h3>\n                      <div className=\"flex items-center space-x-3 text-sm text-muted-foreground\">\n                        <span>Type: {page.pageType}</span>\n                        <span>•</span>\n                        <span>Submitted: {new Date(page.submittedAt || page.createdAt).toLocaleDateString()}</span>\n                      </div>\n                    </div>\n                    {getStatusBadge(page.state)}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => window.open(`/preview/${page.id}`, '_blank')}\n                      data-testid={`button-preview-${page.id}`}\n                    >\n                      <Eye className=\"w-4 h-4 mr-1\" />\n                      Preview\n                    </Button>\n                    \n                    <Button\n                      onClick={() => handleApprove(page.id)}\n                      disabled={approveMutation.isPending}\n                      size=\"sm\"\n                      className=\"bg-green-600 hover:bg-green-700\"\n                      data-testid={`button-approve-${page.id}`}\n                    >\n                      <CheckCircle className=\"w-4 h-4 mr-1\" />\n                      Approve\n                    </Button>\n                    \n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => setSelectedPageForRejection(page.id)}\n                          data-testid={`button-reject-${page.id}`}\n                        >\n                          <XCircle className=\"w-4 h-4 mr-1\" />\n                          Reject\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Reject Page: {page.name}</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"rejectionReason\">Reason for rejection</Label>\n                            <Textarea\n                              id=\"rejectionReason\"\n                              value={rejectionReason}\n                              onChange={(e) => setRejectionReason(e.target.value)}\n                              placeholder=\"Explain why this page is being rejected...\"\n                              className=\"mt-1\"\n                              data-testid=\"textarea-rejection-reason\"\n                            />\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              onClick={() => handleReject(page.id, rejectionReason)}\n                              disabled={rejectMutation.isPending || !rejectionReason.trim()}\n                              variant=\"destructive\"\n                              data-testid=\"button-confirm-reject\"\n                            >\n                              Reject Page\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              onClick={() => {\n                                setRejectionReason(\"\");\n                                setSelectedPageForRejection(null);\n                              }}\n                              data-testid=\"button-cancel-reject\"\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Approved Pages Ready to Publish */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Approved Pages Ready to Publish</CardTitle>\n          <CardDescription>\n            These pages have been approved and can be published live\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {allPages?.filter(p => p.state === 'Approved').length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No approved pages ready to publish\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {allPages?.filter(p => p.state === 'Approved').map((page) => (\n                <div key={page.id} className=\"border rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <h3 className=\"font-semibold text-lg\">{page.name}</h3>\n                      <div className=\"flex items-center space-x-3 text-sm text-muted-foreground\">\n                        <span>Type: {page.pageType}</span>\n                      </div>\n                    </div>\n                    {getStatusBadge(page.state)}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => window.open(`/preview/${page.id}`, '_blank')}\n                      data-testid={`button-preview-approved-${page.id}`}\n                    >\n                      <Eye className=\"w-4 h-4 mr-1\" />\n                      Preview\n                    </Button>\n                    \n                    <Button\n                      onClick={() => handlePublish(page.id)}\n                      disabled={publishMutation.isPending}\n                      size=\"sm\"\n                      className=\"bg-green-600 hover:bg-green-700\"\n                      data-testid={`button-publish-${page.id}`}\n                    >\n                      <CheckCircle className=\"w-4 h-4 mr-1\" />\n                      Publish Live\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13472}}}